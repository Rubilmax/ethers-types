/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PendleMarketFactoryV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimOwnership"
      | "createNewMarket"
      | "gaugeController"
      | "getMarketConfig"
      | "isValidMarket"
      | "marketCreationCodeContractA"
      | "marketCreationCodeContractB"
      | "marketCreationCodeSizeA"
      | "marketCreationCodeSizeB"
      | "maxLnFeeRateRoot"
      | "maxReserveFeePercent"
      | "minInitialAnchor"
      | "owner"
      | "pendingOwner"
      | "reserveFeePercent"
      | "setOverriddenFee"
      | "setTreasuryAndFeeReserve"
      | "transferOwnership"
      | "treasury"
      | "vePendle"
      | "yieldContractFactory"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreateNewMarket"
      | "Initialized"
      | "NewTreasuryAndFeeReserve"
      | "OwnershipTransferred"
      | "SetOverriddenFee"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createNewMarket",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gaugeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketConfig",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketCreationCodeContractA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketCreationCodeContractB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketCreationCodeSizeA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketCreationCodeSizeB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLnFeeRateRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReserveFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minInitialAnchor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOverriddenFee",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAndFeeReserve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "vePendle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldContractFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gaugeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCreationCodeContractA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCreationCodeContractB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCreationCodeSizeA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketCreationCodeSizeB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLnFeeRateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxReserveFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minInitialAnchor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOverriddenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAndFeeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vePendle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yieldContractFactory",
    data: BytesLike
  ): Result;
}

export namespace CreateNewMarketEvent {
  export type InputTuple = [
    market: AddressLike,
    PT: AddressLike,
    scalarRoot: BigNumberish,
    initialAnchor: BigNumberish,
    lnFeeRateRoot: BigNumberish
  ];
  export type OutputTuple = [
    market: string,
    PT: string,
    scalarRoot: bigint,
    initialAnchor: bigint,
    lnFeeRateRoot: bigint
  ];
  export interface OutputObject {
    market: string;
    PT: string;
    scalarRoot: bigint;
    initialAnchor: bigint;
    lnFeeRateRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTreasuryAndFeeReserveEvent {
  export type InputTuple = [
    treasury: AddressLike,
    reserveFeePercent: BigNumberish
  ];
  export type OutputTuple = [treasury: string, reserveFeePercent: bigint];
  export interface OutputObject {
    treasury: string;
    reserveFeePercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOverriddenFeeEvent {
  export type InputTuple = [
    router: AddressLike,
    market: AddressLike,
    lnFeeRateRoot: BigNumberish
  ];
  export type OutputTuple = [
    router: string,
    market: string,
    lnFeeRateRoot: bigint
  ];
  export interface OutputObject {
    router: string;
    market: string;
    lnFeeRateRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PendleMarketFactoryV3 extends BaseContract {
  connect(runner?: ContractRunner | null): PendleMarketFactoryV3;
  waitForDeployment(): Promise<this>;

  interface: PendleMarketFactoryV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  createNewMarket: TypedContractMethod<
    [
      PT: AddressLike,
      scalarRoot: BigNumberish,
      initialAnchor: BigNumberish,
      lnFeeRateRoot: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  gaugeController: TypedContractMethod<[], [string], "view">;

  getMarketConfig: TypedContractMethod<
    [market: AddressLike, router: AddressLike],
    [
      [string, bigint, bigint] & {
        _treasury: string;
        _overriddenFee: bigint;
        _reserveFeePercent: bigint;
      }
    ],
    "view"
  >;

  isValidMarket: TypedContractMethod<[market: AddressLike], [boolean], "view">;

  marketCreationCodeContractA: TypedContractMethod<[], [string], "view">;

  marketCreationCodeContractB: TypedContractMethod<[], [string], "view">;

  marketCreationCodeSizeA: TypedContractMethod<[], [bigint], "view">;

  marketCreationCodeSizeB: TypedContractMethod<[], [bigint], "view">;

  maxLnFeeRateRoot: TypedContractMethod<[], [bigint], "view">;

  maxReserveFeePercent: TypedContractMethod<[], [bigint], "view">;

  minInitialAnchor: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  reserveFeePercent: TypedContractMethod<[], [bigint], "view">;

  setOverriddenFee: TypedContractMethod<
    [router: AddressLike, market: AddressLike, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasuryAndFeeReserve: TypedContractMethod<
    [newTreasury: AddressLike, newReserveFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  vePendle: TypedContractMethod<[], [string], "view">;

  yieldContractFactory: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createNewMarket"
  ): TypedContractMethod<
    [
      PT: AddressLike,
      scalarRoot: BigNumberish,
      initialAnchor: BigNumberish,
      lnFeeRateRoot: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gaugeController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketConfig"
  ): TypedContractMethod<
    [market: AddressLike, router: AddressLike],
    [
      [string, bigint, bigint] & {
        _treasury: string;
        _overriddenFee: bigint;
        _reserveFeePercent: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidMarket"
  ): TypedContractMethod<[market: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketCreationCodeContractA"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketCreationCodeContractB"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketCreationCodeSizeA"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketCreationCodeSizeB"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxLnFeeRateRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxReserveFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minInitialAnchor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reserveFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setOverriddenFee"
  ): TypedContractMethod<
    [router: AddressLike, market: AddressLike, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTreasuryAndFeeReserve"
  ): TypedContractMethod<
    [newTreasury: AddressLike, newReserveFeePercent: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vePendle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "yieldContractFactory"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CreateNewMarket"
  ): TypedContractEvent<
    CreateNewMarketEvent.InputTuple,
    CreateNewMarketEvent.OutputTuple,
    CreateNewMarketEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewTreasuryAndFeeReserve"
  ): TypedContractEvent<
    NewTreasuryAndFeeReserveEvent.InputTuple,
    NewTreasuryAndFeeReserveEvent.OutputTuple,
    NewTreasuryAndFeeReserveEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetOverriddenFee"
  ): TypedContractEvent<
    SetOverriddenFeeEvent.InputTuple,
    SetOverriddenFeeEvent.OutputTuple,
    SetOverriddenFeeEvent.OutputObject
  >;

  filters: {
    "CreateNewMarket(address,address,int256,int256,uint256)": TypedContractEvent<
      CreateNewMarketEvent.InputTuple,
      CreateNewMarketEvent.OutputTuple,
      CreateNewMarketEvent.OutputObject
    >;
    CreateNewMarket: TypedContractEvent<
      CreateNewMarketEvent.InputTuple,
      CreateNewMarketEvent.OutputTuple,
      CreateNewMarketEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewTreasuryAndFeeReserve(address,uint8)": TypedContractEvent<
      NewTreasuryAndFeeReserveEvent.InputTuple,
      NewTreasuryAndFeeReserveEvent.OutputTuple,
      NewTreasuryAndFeeReserveEvent.OutputObject
    >;
    NewTreasuryAndFeeReserve: TypedContractEvent<
      NewTreasuryAndFeeReserveEvent.InputTuple,
      NewTreasuryAndFeeReserveEvent.OutputTuple,
      NewTreasuryAndFeeReserveEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetOverriddenFee(address,address,uint80)": TypedContractEvent<
      SetOverriddenFeeEvent.InputTuple,
      SetOverriddenFeeEvent.OutputTuple,
      SetOverriddenFeeEvent.OutputObject
    >;
    SetOverriddenFee: TypedContractEvent<
      SetOverriddenFeeEvent.InputTuple,
      SetOverriddenFeeEvent.OutputTuple,
      SetOverriddenFeeEvent.OutputObject
    >;
  };
}
