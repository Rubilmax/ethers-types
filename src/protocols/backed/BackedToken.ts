/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BackedTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELEGATED_TRANSFER_TYPEHASH"
      | "DOMAIN_SEPARATOR"
      | "PERMIT_TYPEHASH"
      | "VERSION"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burner"
      | "decimals"
      | "decreaseAllowance"
      | "delegateMode"
      | "delegateWhitelist"
      | "delegatedTransfer"
      | "increaseAllowance"
      | "initialize"
      | "isPaused"
      | "mint"
      | "minter"
      | "name"
      | "nonces"
      | "owner"
      | "pauser"
      | "permit"
      | "renounceOwnership"
      | "sanctionsList"
      | "setBurner"
      | "setDelegateMode"
      | "setDelegateWhitelist"
      | "setMinter"
      | "setPause"
      | "setPauser"
      | "setSanctionsList"
      | "setTerms"
      | "symbol"
      | "terms"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "DelegateModeChange"
      | "DelegateWhitelistChange"
      | "NewBurner"
      | "NewMinter"
      | "NewPauser"
      | "NewSanctionsList"
      | "NewTerms"
      | "OwnershipTransferred"
      | "PauseModeChange"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DELEGATED_TRANSFER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burner", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedTransfer",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sanctionsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBurner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegateMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegateWhitelist",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setPauser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSanctionsList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setTerms", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "terms", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATED_TRANSFER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sanctionsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBurner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDelegateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSanctionsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTerms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "terms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateModeChangeEvent {
  export type InputTuple = [delegateMode: boolean];
  export type OutputTuple = [delegateMode: boolean];
  export interface OutputObject {
    delegateMode: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateWhitelistChangeEvent {
  export type InputTuple = [whitelistAddress: AddressLike, status: boolean];
  export type OutputTuple = [whitelistAddress: string, status: boolean];
  export interface OutputObject {
    whitelistAddress: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBurnerEvent {
  export type InputTuple = [newBurner: AddressLike];
  export type OutputTuple = [newBurner: string];
  export interface OutputObject {
    newBurner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMinterEvent {
  export type InputTuple = [newMinter: AddressLike];
  export type OutputTuple = [newMinter: string];
  export interface OutputObject {
    newMinter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPauserEvent {
  export type InputTuple = [newPauser: AddressLike];
  export type OutputTuple = [newPauser: string];
  export interface OutputObject {
    newPauser: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSanctionsListEvent {
  export type InputTuple = [newSanctionsList: AddressLike];
  export type OutputTuple = [newSanctionsList: string];
  export interface OutputObject {
    newSanctionsList: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTermsEvent {
  export type InputTuple = [newTerms: string];
  export type OutputTuple = [newTerms: string];
  export interface OutputObject {
    newTerms: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseModeChangeEvent {
  export type InputTuple = [pauseMode: boolean];
  export type OutputTuple = [pauseMode: boolean];
  export interface OutputObject {
    pauseMode: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BackedToken extends BaseContract {
  connect(runner?: ContractRunner | null): BackedToken;
  waitForDeployment(): Promise<this>;

  interface: BackedTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELEGATED_TRANSFER_TYPEHASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  burner: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  delegateMode: TypedContractMethod<[], [boolean], "view">;

  delegateWhitelist: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  delegatedTransfer: TypedContractMethod<
    [
      owner: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [name_: string, symbol_: string],
    [void],
    "nonpayable"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  mint: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  minter: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pauser: TypedContractMethod<[], [string], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sanctionsList: TypedContractMethod<[], [string], "view">;

  setBurner: TypedContractMethod<
    [newBurner: AddressLike],
    [void],
    "nonpayable"
  >;

  setDelegateMode: TypedContractMethod<
    [_delegateMode: boolean],
    [void],
    "nonpayable"
  >;

  setDelegateWhitelist: TypedContractMethod<
    [whitelistAddress: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  setMinter: TypedContractMethod<
    [newMinter: AddressLike],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[newPauseMode: boolean], [void], "nonpayable">;

  setPauser: TypedContractMethod<
    [newPauser: AddressLike],
    [void],
    "nonpayable"
  >;

  setSanctionsList: TypedContractMethod<
    [newSanctionsList: AddressLike],
    [void],
    "nonpayable"
  >;

  setTerms: TypedContractMethod<[newTerms: string], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  terms: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELEGATED_TRANSFER_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "delegateWhitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "delegatedTransfer"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      to: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [name_: string, symbol_: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sanctionsList"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBurner"
  ): TypedContractMethod<[newBurner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelegateMode"
  ): TypedContractMethod<[_delegateMode: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelegateWhitelist"
  ): TypedContractMethod<
    [whitelistAddress: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinter"
  ): TypedContractMethod<[newMinter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[newPauseMode: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPauser"
  ): TypedContractMethod<[newPauser: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSanctionsList"
  ): TypedContractMethod<[newSanctionsList: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTerms"
  ): TypedContractMethod<[newTerms: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "terms"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "DelegateModeChange"
  ): TypedContractEvent<
    DelegateModeChangeEvent.InputTuple,
    DelegateModeChangeEvent.OutputTuple,
    DelegateModeChangeEvent.OutputObject
  >;
  getEvent(
    key: "DelegateWhitelistChange"
  ): TypedContractEvent<
    DelegateWhitelistChangeEvent.InputTuple,
    DelegateWhitelistChangeEvent.OutputTuple,
    DelegateWhitelistChangeEvent.OutputObject
  >;
  getEvent(
    key: "NewBurner"
  ): TypedContractEvent<
    NewBurnerEvent.InputTuple,
    NewBurnerEvent.OutputTuple,
    NewBurnerEvent.OutputObject
  >;
  getEvent(
    key: "NewMinter"
  ): TypedContractEvent<
    NewMinterEvent.InputTuple,
    NewMinterEvent.OutputTuple,
    NewMinterEvent.OutputObject
  >;
  getEvent(
    key: "NewPauser"
  ): TypedContractEvent<
    NewPauserEvent.InputTuple,
    NewPauserEvent.OutputTuple,
    NewPauserEvent.OutputObject
  >;
  getEvent(
    key: "NewSanctionsList"
  ): TypedContractEvent<
    NewSanctionsListEvent.InputTuple,
    NewSanctionsListEvent.OutputTuple,
    NewSanctionsListEvent.OutputObject
  >;
  getEvent(
    key: "NewTerms"
  ): TypedContractEvent<
    NewTermsEvent.InputTuple,
    NewTermsEvent.OutputTuple,
    NewTermsEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PauseModeChange"
  ): TypedContractEvent<
    PauseModeChangeEvent.InputTuple,
    PauseModeChangeEvent.OutputTuple,
    PauseModeChangeEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "DelegateModeChange(bool)": TypedContractEvent<
      DelegateModeChangeEvent.InputTuple,
      DelegateModeChangeEvent.OutputTuple,
      DelegateModeChangeEvent.OutputObject
    >;
    DelegateModeChange: TypedContractEvent<
      DelegateModeChangeEvent.InputTuple,
      DelegateModeChangeEvent.OutputTuple,
      DelegateModeChangeEvent.OutputObject
    >;

    "DelegateWhitelistChange(address,bool)": TypedContractEvent<
      DelegateWhitelistChangeEvent.InputTuple,
      DelegateWhitelistChangeEvent.OutputTuple,
      DelegateWhitelistChangeEvent.OutputObject
    >;
    DelegateWhitelistChange: TypedContractEvent<
      DelegateWhitelistChangeEvent.InputTuple,
      DelegateWhitelistChangeEvent.OutputTuple,
      DelegateWhitelistChangeEvent.OutputObject
    >;

    "NewBurner(address)": TypedContractEvent<
      NewBurnerEvent.InputTuple,
      NewBurnerEvent.OutputTuple,
      NewBurnerEvent.OutputObject
    >;
    NewBurner: TypedContractEvent<
      NewBurnerEvent.InputTuple,
      NewBurnerEvent.OutputTuple,
      NewBurnerEvent.OutputObject
    >;

    "NewMinter(address)": TypedContractEvent<
      NewMinterEvent.InputTuple,
      NewMinterEvent.OutputTuple,
      NewMinterEvent.OutputObject
    >;
    NewMinter: TypedContractEvent<
      NewMinterEvent.InputTuple,
      NewMinterEvent.OutputTuple,
      NewMinterEvent.OutputObject
    >;

    "NewPauser(address)": TypedContractEvent<
      NewPauserEvent.InputTuple,
      NewPauserEvent.OutputTuple,
      NewPauserEvent.OutputObject
    >;
    NewPauser: TypedContractEvent<
      NewPauserEvent.InputTuple,
      NewPauserEvent.OutputTuple,
      NewPauserEvent.OutputObject
    >;

    "NewSanctionsList(address)": TypedContractEvent<
      NewSanctionsListEvent.InputTuple,
      NewSanctionsListEvent.OutputTuple,
      NewSanctionsListEvent.OutputObject
    >;
    NewSanctionsList: TypedContractEvent<
      NewSanctionsListEvent.InputTuple,
      NewSanctionsListEvent.OutputTuple,
      NewSanctionsListEvent.OutputObject
    >;

    "NewTerms(string)": TypedContractEvent<
      NewTermsEvent.InputTuple,
      NewTermsEvent.OutputTuple,
      NewTermsEvent.OutputObject
    >;
    NewTerms: TypedContractEvent<
      NewTermsEvent.InputTuple,
      NewTermsEvent.OutputTuple,
      NewTermsEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PauseModeChange(bool)": TypedContractEvent<
      PauseModeChangeEvent.InputTuple,
      PauseModeChangeEvent.OutputTuple,
      PauseModeChangeEvent.OutputObject
    >;
    PauseModeChange: TypedContractEvent<
      PauseModeChangeEvent.InputTuple,
      PauseModeChangeEvent.OutputTuple,
      PauseModeChangeEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
