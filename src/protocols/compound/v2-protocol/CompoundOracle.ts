/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace UniswapConfig {
  export type TokenConfigStruct = {
    cToken: AddressLike;
    underlying: AddressLike;
    symbolHash: BytesLike;
    baseUnit: BigNumberish;
    priceSource: BigNumberish;
    fixedPrice: BigNumberish;
    uniswapMarket: AddressLike;
    reporter: AddressLike;
    reporterMultiplier: BigNumberish;
    isUniswapReversed: boolean;
  };

  export type TokenConfigStructOutput = [
    cToken: string,
    underlying: string,
    symbolHash: string,
    baseUnit: bigint,
    priceSource: bigint,
    fixedPrice: bigint,
    uniswapMarket: string,
    reporter: string,
    reporterMultiplier: bigint,
    isUniswapReversed: boolean
  ] & {
    cToken: string;
    underlying: string;
    symbolHash: string;
    baseUnit: bigint;
    priceSource: bigint;
    fixedPrice: bigint;
    uniswapMarket: string;
    reporter: string;
    reporterMultiplier: bigint;
    isUniswapReversed: boolean;
  };
}

export interface CompoundOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "activateFailover"
      | "anchorPeriod"
      | "deactivateFailover"
      | "ethBaseUnit"
      | "expScale"
      | "getTokenConfig"
      | "getTokenConfigByCToken"
      | "getTokenConfigByReporter"
      | "getTokenConfigBySymbol"
      | "getTokenConfigBySymbolHash"
      | "getTokenConfigByUnderlying"
      | "getUnderlyingPrice"
      | "lowerBoundAnchorRatio"
      | "maxTokens"
      | "newObservations"
      | "numTokens"
      | "oldObservations"
      | "owner"
      | "pokeFailedOverPrice"
      | "price"
      | "prices"
      | "transferOwnership"
      | "upperBoundAnchorRatio"
      | "validate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnchorPriceUpdated"
      | "FailoverActivated"
      | "FailoverDeactivated"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "PriceGuarded"
      | "PriceUpdated"
      | "UniswapWindowUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateFailover",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "anchorPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateFailover",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ethBaseUnit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expScale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigByCToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigByReporter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigBySymbolHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigByUnderlying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lowerBoundAnchorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newObservations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "numTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oldObservations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pokeFailedOverPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "price", values: [string]): string;
  encodeFunctionData(functionFragment: "prices", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upperBoundAnchorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateFailover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anchorPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateFailover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethBaseUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expScale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigByCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigByReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigBySymbolHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigByUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowerBoundAnchorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newObservations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oldObservations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pokeFailedOverPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upperBoundAnchorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
}

export namespace AnchorPriceUpdatedEvent {
  export type InputTuple = [
    symbolHash: BytesLike,
    anchorPrice: BigNumberish,
    oldTimestamp: BigNumberish,
    newTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    symbolHash: string,
    anchorPrice: bigint,
    oldTimestamp: bigint,
    newTimestamp: bigint
  ];
  export interface OutputObject {
    symbolHash: string;
    anchorPrice: bigint;
    oldTimestamp: bigint;
    newTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FailoverActivatedEvent {
  export type InputTuple = [symbolHash: BytesLike];
  export type OutputTuple = [symbolHash: string];
  export interface OutputObject {
    symbolHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FailoverDeactivatedEvent {
  export type InputTuple = [symbolHash: BytesLike];
  export type OutputTuple = [symbolHash: string];
  export interface OutputObject {
    symbolHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceGuardedEvent {
  export type InputTuple = [
    symbolHash: BytesLike,
    reporter: BigNumberish,
    anchor: BigNumberish
  ];
  export type OutputTuple = [
    symbolHash: string,
    reporter: bigint,
    anchor: bigint
  ];
  export interface OutputObject {
    symbolHash: string;
    reporter: bigint;
    anchor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [symbolHash: BytesLike, price: BigNumberish];
  export type OutputTuple = [symbolHash: string, price: bigint];
  export interface OutputObject {
    symbolHash: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniswapWindowUpdatedEvent {
  export type InputTuple = [
    symbolHash: BytesLike,
    oldTimestamp: BigNumberish,
    newTimestamp: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish
  ];
  export type OutputTuple = [
    symbolHash: string,
    oldTimestamp: bigint,
    newTimestamp: bigint,
    oldPrice: bigint,
    newPrice: bigint
  ];
  export interface OutputObject {
    symbolHash: string;
    oldTimestamp: bigint;
    newTimestamp: bigint;
    oldPrice: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CompoundOracle extends BaseContract {
  connect(runner?: ContractRunner | null): CompoundOracle;
  waitForDeployment(): Promise<this>;

  interface: CompoundOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  activateFailover: TypedContractMethod<
    [symbolHash: BytesLike],
    [void],
    "nonpayable"
  >;

  anchorPeriod: TypedContractMethod<[], [bigint], "view">;

  deactivateFailover: TypedContractMethod<
    [symbolHash: BytesLike],
    [void],
    "nonpayable"
  >;

  ethBaseUnit: TypedContractMethod<[], [bigint], "view">;

  expScale: TypedContractMethod<[], [bigint], "view">;

  getTokenConfig: TypedContractMethod<
    [i: BigNumberish],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;

  getTokenConfigByCToken: TypedContractMethod<
    [cToken: AddressLike],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;

  getTokenConfigByReporter: TypedContractMethod<
    [reporter: AddressLike],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;

  getTokenConfigBySymbol: TypedContractMethod<
    [symbol: string],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;

  getTokenConfigBySymbolHash: TypedContractMethod<
    [symbolHash: BytesLike],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;

  getTokenConfigByUnderlying: TypedContractMethod<
    [underlying: AddressLike],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;

  getUnderlyingPrice: TypedContractMethod<
    [cToken: AddressLike],
    [bigint],
    "view"
  >;

  lowerBoundAnchorRatio: TypedContractMethod<[], [bigint], "view">;

  maxTokens: TypedContractMethod<[], [bigint], "view">;

  newObservations: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { timestamp: bigint; acc: bigint }],
    "view"
  >;

  numTokens: TypedContractMethod<[], [bigint], "view">;

  oldObservations: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { timestamp: bigint; acc: bigint }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pokeFailedOverPrice: TypedContractMethod<
    [symbolHash: BytesLike],
    [void],
    "nonpayable"
  >;

  price: TypedContractMethod<[symbol: string], [bigint], "view">;

  prices: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, boolean] & { price: bigint; failoverActive: boolean }],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  upperBoundAnchorRatio: TypedContractMethod<[], [bigint], "view">;

  validate: TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      currentAnswer: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activateFailover"
  ): TypedContractMethod<[symbolHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "anchorPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deactivateFailover"
  ): TypedContractMethod<[symbolHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ethBaseUnit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "expScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenConfig"
  ): TypedContractMethod<
    [i: BigNumberish],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenConfigByCToken"
  ): TypedContractMethod<
    [cToken: AddressLike],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenConfigByReporter"
  ): TypedContractMethod<
    [reporter: AddressLike],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenConfigBySymbol"
  ): TypedContractMethod<
    [symbol: string],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenConfigBySymbolHash"
  ): TypedContractMethod<
    [symbolHash: BytesLike],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenConfigByUnderlying"
  ): TypedContractMethod<
    [underlying: AddressLike],
    [UniswapConfig.TokenConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnderlyingPrice"
  ): TypedContractMethod<[cToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lowerBoundAnchorRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "newObservations"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { timestamp: bigint; acc: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "numTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oldObservations"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { timestamp: bigint; acc: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pokeFailedOverPrice"
  ): TypedContractMethod<[symbolHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<[symbol: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "prices"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, boolean] & { price: bigint; failoverActive: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upperBoundAnchorRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validate"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      currentAnswer: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "AnchorPriceUpdated"
  ): TypedContractEvent<
    AnchorPriceUpdatedEvent.InputTuple,
    AnchorPriceUpdatedEvent.OutputTuple,
    AnchorPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FailoverActivated"
  ): TypedContractEvent<
    FailoverActivatedEvent.InputTuple,
    FailoverActivatedEvent.OutputTuple,
    FailoverActivatedEvent.OutputObject
  >;
  getEvent(
    key: "FailoverDeactivated"
  ): TypedContractEvent<
    FailoverDeactivatedEvent.InputTuple,
    FailoverDeactivatedEvent.OutputTuple,
    FailoverDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceGuarded"
  ): TypedContractEvent<
    PriceGuardedEvent.InputTuple,
    PriceGuardedEvent.OutputTuple,
    PriceGuardedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UniswapWindowUpdated"
  ): TypedContractEvent<
    UniswapWindowUpdatedEvent.InputTuple,
    UniswapWindowUpdatedEvent.OutputTuple,
    UniswapWindowUpdatedEvent.OutputObject
  >;

  filters: {
    "AnchorPriceUpdated(bytes32,uint256,uint256,uint256)": TypedContractEvent<
      AnchorPriceUpdatedEvent.InputTuple,
      AnchorPriceUpdatedEvent.OutputTuple,
      AnchorPriceUpdatedEvent.OutputObject
    >;
    AnchorPriceUpdated: TypedContractEvent<
      AnchorPriceUpdatedEvent.InputTuple,
      AnchorPriceUpdatedEvent.OutputTuple,
      AnchorPriceUpdatedEvent.OutputObject
    >;

    "FailoverActivated(bytes32)": TypedContractEvent<
      FailoverActivatedEvent.InputTuple,
      FailoverActivatedEvent.OutputTuple,
      FailoverActivatedEvent.OutputObject
    >;
    FailoverActivated: TypedContractEvent<
      FailoverActivatedEvent.InputTuple,
      FailoverActivatedEvent.OutputTuple,
      FailoverActivatedEvent.OutputObject
    >;

    "FailoverDeactivated(bytes32)": TypedContractEvent<
      FailoverDeactivatedEvent.InputTuple,
      FailoverDeactivatedEvent.OutputTuple,
      FailoverDeactivatedEvent.OutputObject
    >;
    FailoverDeactivated: TypedContractEvent<
      FailoverDeactivatedEvent.InputTuple,
      FailoverDeactivatedEvent.OutputTuple,
      FailoverDeactivatedEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceGuarded(bytes32,uint256,uint256)": TypedContractEvent<
      PriceGuardedEvent.InputTuple,
      PriceGuardedEvent.OutputTuple,
      PriceGuardedEvent.OutputObject
    >;
    PriceGuarded: TypedContractEvent<
      PriceGuardedEvent.InputTuple,
      PriceGuardedEvent.OutputTuple,
      PriceGuardedEvent.OutputObject
    >;

    "PriceUpdated(bytes32,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UniswapWindowUpdatedEvent.InputTuple,
      UniswapWindowUpdatedEvent.OutputTuple,
      UniswapWindowUpdatedEvent.OutputObject
    >;
    UniswapWindowUpdated: TypedContractEvent<
      UniswapWindowUpdatedEvent.InputTuple,
      UniswapWindowUpdatedEvent.OutputTuple,
      UniswapWindowUpdatedEvent.OutputObject
    >;
  };
}
