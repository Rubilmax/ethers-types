/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace CometConfiguration {
  export type ExtConfigurationStruct = {
    name32: BytesLike;
    symbol32: BytesLike;
  };

  export type ExtConfigurationStructOutput = [string, string] & {
    name32: string;
    symbol32: string;
  };
}

export declare namespace CometStorage {
  export type TotalsBasicStruct = {
    baseSupplyIndex: BigNumberish;
    baseBorrowIndex: BigNumberish;
    trackingSupplyIndex: BigNumberish;
    trackingBorrowIndex: BigNumberish;
    totalSupplyBase: BigNumberish;
    totalBorrowBase: BigNumberish;
    lastAccrualTime: BigNumberish;
    pauseFlags: BigNumberish;
  };

  export type TotalsBasicStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    baseSupplyIndex: BigNumber;
    baseBorrowIndex: BigNumber;
    trackingSupplyIndex: BigNumber;
    trackingBorrowIndex: BigNumber;
    totalSupplyBase: BigNumber;
    totalBorrowBase: BigNumber;
    lastAccrualTime: number;
    pauseFlags: number;
  };
}

export interface CometExtInterface extends utils.Interface {
  functions: {
    "allow(address,bool)": FunctionFragment;
    "allowBySig(address,address,bool,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "baseAccrualScale()": FunctionFragment;
    "baseIndexScale()": FunctionFragment;
    "baseTrackingAccrued(address)": FunctionFragment;
    "collateralBalanceOf(address,address)": FunctionFragment;
    "factorScale()": FunctionFragment;
    "hasPermission(address,address)": FunctionFragment;
    "isAllowed(address,address)": FunctionFragment;
    "liquidatorPoints(address)": FunctionFragment;
    "maxAssets()": FunctionFragment;
    "name()": FunctionFragment;
    "priceScale()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalsBasic()": FunctionFragment;
    "totalsCollateral(address)": FunctionFragment;
    "userBasic(address)": FunctionFragment;
    "userCollateral(address,address)": FunctionFragment;
    "userNonce(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allow"
      | "allowBySig"
      | "allowance"
      | "approve"
      | "baseAccrualScale"
      | "baseIndexScale"
      | "baseTrackingAccrued"
      | "collateralBalanceOf"
      | "factorScale"
      | "hasPermission"
      | "isAllowed"
      | "liquidatorPoints"
      | "maxAssets"
      | "name"
      | "priceScale"
      | "symbol"
      | "totalsBasic"
      | "totalsCollateral"
      | "userBasic"
      | "userCollateral"
      | "userNonce"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allow",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowBySig",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseAccrualScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseIndexScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseTrackingAccrued",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralBalanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "factorScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatorPoints",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "maxAssets", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceScale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalsBasic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalsCollateral",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userBasic", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userCollateral",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "userNonce", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowBySig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseAccrualScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseIndexScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseTrackingAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factorScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalsBasic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBasic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CometExt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CometExtInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allow(
      manager: string,
      isAllowed_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowBySig(
      owner: string,
      manager: string,
      isAllowed_: boolean,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    baseAccrualScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseIndexScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseTrackingAccrued(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralBalanceOf(
      account: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factorScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasPermission(
      owner: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAllowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidatorPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, number] & {
        numAbsorbs: number;
        numAbsorbed: BigNumber;
        approxSpend: BigNumber;
        _reserved: number;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    priceScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalsBasic(
      overrides?: CallOverrides
    ): Promise<[CometStorage.TotalsBasicStructOutput]>;

    totalsCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSupplyAsset: BigNumber;
        _reserved: BigNumber;
      }
    >;

    userBasic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number] & {
        principal: BigNumber;
        baseTrackingIndex: BigNumber;
        baseTrackingAccrued: BigNumber;
        assetsIn: number;
        _reserved: number;
      }
    >;

    userCollateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; _reserved: BigNumber }
    >;

    userNonce(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  allow(
    manager: string,
    isAllowed_: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowBySig(
    owner: string,
    manager: string,
    isAllowed_: boolean,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  baseAccrualScale(overrides?: CallOverrides): Promise<BigNumber>;

  baseIndexScale(overrides?: CallOverrides): Promise<BigNumber>;

  baseTrackingAccrued(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralBalanceOf(
    account: string,
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factorScale(overrides?: CallOverrides): Promise<BigNumber>;

  hasPermission(
    owner: string,
    manager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllowed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidatorPoints(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, number] & {
      numAbsorbs: number;
      numAbsorbed: BigNumber;
      approxSpend: BigNumber;
      _reserved: number;
    }
  >;

  maxAssets(overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  priceScale(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalsBasic(
    overrides?: CallOverrides
  ): Promise<CometStorage.TotalsBasicStructOutput>;

  totalsCollateral(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalSupplyAsset: BigNumber;
      _reserved: BigNumber;
    }
  >;

  userBasic(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number] & {
      principal: BigNumber;
      baseTrackingIndex: BigNumber;
      baseTrackingAccrued: BigNumber;
      assetsIn: number;
      _reserved: number;
    }
  >;

  userCollateral(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { balance: BigNumber; _reserved: BigNumber }
  >;

  userNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allow(
      manager: string,
      isAllowed_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    allowBySig(
      owner: string,
      manager: string,
      isAllowed_: boolean,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    baseAccrualScale(overrides?: CallOverrides): Promise<BigNumber>;

    baseIndexScale(overrides?: CallOverrides): Promise<BigNumber>;

    baseTrackingAccrued(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralBalanceOf(
      account: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factorScale(overrides?: CallOverrides): Promise<BigNumber>;

    hasPermission(
      owner: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidatorPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, number] & {
        numAbsorbs: number;
        numAbsorbed: BigNumber;
        approxSpend: BigNumber;
        _reserved: number;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    priceScale(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalsBasic(
      overrides?: CallOverrides
    ): Promise<CometStorage.TotalsBasicStructOutput>;

    totalsCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSupplyAsset: BigNumber;
        _reserved: BigNumber;
      }
    >;

    userBasic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number] & {
        principal: BigNumber;
        baseTrackingIndex: BigNumber;
        baseTrackingAccrued: BigNumber;
        assetsIn: number;
        _reserved: number;
      }
    >;

    userCollateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; _reserved: BigNumber }
    >;

    userNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;
  };

  estimateGas: {
    allow(
      manager: string,
      isAllowed_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowBySig(
      owner: string,
      manager: string,
      isAllowed_: boolean,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    baseAccrualScale(overrides?: CallOverrides): Promise<BigNumber>;

    baseIndexScale(overrides?: CallOverrides): Promise<BigNumber>;

    baseTrackingAccrued(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralBalanceOf(
      account: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factorScale(overrides?: CallOverrides): Promise<BigNumber>;

    hasPermission(
      owner: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatorPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    priceScale(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalsBasic(overrides?: CallOverrides): Promise<BigNumber>;

    totalsCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBasic(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userCollateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allow(
      manager: string,
      isAllowed_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowBySig(
      owner: string,
      manager: string,
      isAllowed_: boolean,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    baseAccrualScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseIndexScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseTrackingAccrued(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralBalanceOf(
      account: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factorScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasPermission(
      owner: string,
      manager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatorPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalsBasic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalsCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBasic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCollateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
