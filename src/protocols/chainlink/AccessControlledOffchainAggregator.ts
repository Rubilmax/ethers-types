/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AccessControlledOffchainAggregatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LINK"
      | "acceptOwnership"
      | "acceptPayeeship"
      | "addAccess"
      | "billingAccessController"
      | "checkEnabled"
      | "decimals"
      | "description"
      | "disableAccessCheck"
      | "enableAccessCheck"
      | "getAnswer"
      | "getBilling"
      | "getRoundData"
      | "getTimestamp"
      | "hasAccess"
      | "latestAnswer"
      | "latestConfigDetails"
      | "latestRound"
      | "latestRoundData"
      | "latestTimestamp"
      | "latestTransmissionDetails"
      | "linkAvailableForPayment"
      | "maxAnswer"
      | "minAnswer"
      | "oracleObservationCount"
      | "owedPayment"
      | "owner"
      | "removeAccess"
      | "requestNewRound"
      | "requesterAccessController"
      | "setBilling"
      | "setBillingAccessController"
      | "setConfig"
      | "setPayees"
      | "setRequesterAccessController"
      | "setValidator"
      | "transferOwnership"
      | "transferPayeeship"
      | "transmit"
      | "transmitters"
      | "validator"
      | "version"
      | "withdrawFunds"
      | "withdrawPayment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddedAccess"
      | "AnswerUpdated"
      | "BillingAccessControllerSet"
      | "BillingSet"
      | "CheckAccessDisabled"
      | "CheckAccessEnabled"
      | "ConfigSet"
      | "NewRound"
      | "NewTransmission"
      | "OraclePaid"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "PayeeshipTransferRequested"
      | "PayeeshipTransferred"
      | "RemovedAccess"
      | "RequesterAccessControllerSet"
      | "RoundRequested"
      | "ValidatorUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptPayeeship",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "billingAccessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableAccessCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableAccessCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnswer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBilling",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestTransmissionDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linkAvailableForPayment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxAnswer", values?: undefined): string;
  encodeFunctionData(functionFragment: "minAnswer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleObservationCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "owedPayment",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestNewRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requesterAccessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBilling",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBillingAccessController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      AddressLike[],
      AddressLike[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPayees",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequesterAccessController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPayeeship",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transmit",
    values: [BytesLike, BytesLike[], BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transmitters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "validator", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayment",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptPayeeship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "billingAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAccessCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableAccessCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBilling", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTransmissionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkAvailableForPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleObservationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owedPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestNewRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requesterAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBilling", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBillingAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPayees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRequesterAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPayeeship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transmit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transmitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayment",
    data: BytesLike
  ): Result;
}

export namespace AddedAccessEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AnswerUpdatedEvent {
  export type InputTuple = [
    current: BigNumberish,
    roundId: BigNumberish,
    updatedAt: BigNumberish
  ];
  export type OutputTuple = [
    current: bigint,
    roundId: bigint,
    updatedAt: bigint
  ];
  export interface OutputObject {
    current: bigint;
    roundId: bigint;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BillingAccessControllerSetEvent {
  export type InputTuple = [old: AddressLike, current: AddressLike];
  export type OutputTuple = [old: string, current: string];
  export interface OutputObject {
    old: string;
    current: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BillingSetEvent {
  export type InputTuple = [
    maximumGasPrice: BigNumberish,
    reasonableGasPrice: BigNumberish,
    microLinkPerEth: BigNumberish,
    linkGweiPerObservation: BigNumberish,
    linkGweiPerTransmission: BigNumberish
  ];
  export type OutputTuple = [
    maximumGasPrice: bigint,
    reasonableGasPrice: bigint,
    microLinkPerEth: bigint,
    linkGweiPerObservation: bigint,
    linkGweiPerTransmission: bigint
  ];
  export interface OutputObject {
    maximumGasPrice: bigint;
    reasonableGasPrice: bigint;
    microLinkPerEth: bigint;
    linkGweiPerObservation: bigint;
    linkGweiPerTransmission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckAccessDisabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckAccessEnabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigSetEvent {
  export type InputTuple = [
    previousConfigBlockNumber: BigNumberish,
    configCount: BigNumberish,
    signers: AddressLike[],
    transmitters: AddressLike[],
    threshold: BigNumberish,
    encodedConfigVersion: BigNumberish,
    encoded: BytesLike
  ];
  export type OutputTuple = [
    previousConfigBlockNumber: bigint,
    configCount: bigint,
    signers: string[],
    transmitters: string[],
    threshold: bigint,
    encodedConfigVersion: bigint,
    encoded: string
  ];
  export interface OutputObject {
    previousConfigBlockNumber: bigint;
    configCount: bigint;
    signers: string[];
    transmitters: string[];
    threshold: bigint;
    encodedConfigVersion: bigint;
    encoded: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewRoundEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    startedBy: AddressLike,
    startedAt: BigNumberish
  ];
  export type OutputTuple = [
    roundId: bigint,
    startedBy: string,
    startedAt: bigint
  ];
  export interface OutputObject {
    roundId: bigint;
    startedBy: string;
    startedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTransmissionEvent {
  export type InputTuple = [
    aggregatorRoundId: BigNumberish,
    answer: BigNumberish,
    transmitter: AddressLike,
    observations: BigNumberish[],
    observers: BytesLike,
    rawReportContext: BytesLike
  ];
  export type OutputTuple = [
    aggregatorRoundId: bigint,
    answer: bigint,
    transmitter: string,
    observations: bigint[],
    observers: string,
    rawReportContext: string
  ];
  export interface OutputObject {
    aggregatorRoundId: bigint;
    answer: bigint;
    transmitter: string;
    observations: bigint[];
    observers: string;
    rawReportContext: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OraclePaidEvent {
  export type InputTuple = [
    transmitter: AddressLike,
    payee: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    transmitter: string,
    payee: string,
    amount: bigint
  ];
  export interface OutputObject {
    transmitter: string;
    payee: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayeeshipTransferRequestedEvent {
  export type InputTuple = [
    transmitter: AddressLike,
    current: AddressLike,
    proposed: AddressLike
  ];
  export type OutputTuple = [
    transmitter: string,
    current: string,
    proposed: string
  ];
  export interface OutputObject {
    transmitter: string;
    current: string;
    proposed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayeeshipTransferredEvent {
  export type InputTuple = [
    transmitter: AddressLike,
    previous: AddressLike,
    current: AddressLike
  ];
  export type OutputTuple = [
    transmitter: string,
    previous: string,
    current: string
  ];
  export interface OutputObject {
    transmitter: string;
    previous: string;
    current: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedAccessEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequesterAccessControllerSetEvent {
  export type InputTuple = [old: AddressLike, current: AddressLike];
  export type OutputTuple = [old: string, current: string];
  export interface OutputObject {
    old: string;
    current: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoundRequestedEvent {
  export type InputTuple = [
    requester: AddressLike,
    configDigest: BytesLike,
    epoch: BigNumberish,
    round: BigNumberish
  ];
  export type OutputTuple = [
    requester: string,
    configDigest: string,
    epoch: bigint,
    round: bigint
  ];
  export interface OutputObject {
    requester: string;
    configDigest: string;
    epoch: bigint;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorUpdatedEvent {
  export type InputTuple = [previous: AddressLike, current: AddressLike];
  export type OutputTuple = [previous: string, current: string];
  export interface OutputObject {
    previous: string;
    current: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccessControlledOffchainAggregator extends BaseContract {
  connect(runner?: ContractRunner | null): AccessControlledOffchainAggregator;
  waitForDeployment(): Promise<this>;

  interface: AccessControlledOffchainAggregatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LINK: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  acceptPayeeship: TypedContractMethod<
    [_transmitter: AddressLike],
    [void],
    "nonpayable"
  >;

  addAccess: TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;

  billingAccessController: TypedContractMethod<[], [string], "view">;

  checkEnabled: TypedContractMethod<[], [boolean], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  disableAccessCheck: TypedContractMethod<[], [void], "nonpayable">;

  enableAccessCheck: TypedContractMethod<[], [void], "nonpayable">;

  getAnswer: TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;

  getBilling: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        maximumGasPrice: bigint;
        reasonableGasPrice: bigint;
        microLinkPerEth: bigint;
        linkGweiPerObservation: bigint;
        linkGweiPerTransmission: bigint;
      }
    ],
    "view"
  >;

  getRoundData: TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  getTimestamp: TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;

  hasAccess: TypedContractMethod<
    [_user: AddressLike, _calldata: BytesLike],
    [boolean],
    "view"
  >;

  latestAnswer: TypedContractMethod<[], [bigint], "view">;

  latestConfigDetails: TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        configCount: bigint;
        blockNumber: bigint;
        configDigest: string;
      }
    ],
    "view"
  >;

  latestRound: TypedContractMethod<[], [bigint], "view">;

  latestRoundData: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  latestTimestamp: TypedContractMethod<[], [bigint], "view">;

  latestTransmissionDetails: TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint] & {
        configDigest: string;
        epoch: bigint;
        round: bigint;
        latestAnswer: bigint;
        latestTimestamp: bigint;
      }
    ],
    "view"
  >;

  linkAvailableForPayment: TypedContractMethod<[], [bigint], "view">;

  maxAnswer: TypedContractMethod<[], [bigint], "view">;

  minAnswer: TypedContractMethod<[], [bigint], "view">;

  oracleObservationCount: TypedContractMethod<
    [_signerOrTransmitter: AddressLike],
    [bigint],
    "view"
  >;

  owedPayment: TypedContractMethod<
    [_transmitter: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeAccess: TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;

  requestNewRound: TypedContractMethod<[], [bigint], "nonpayable">;

  requesterAccessController: TypedContractMethod<[], [string], "view">;

  setBilling: TypedContractMethod<
    [
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setBillingAccessController: TypedContractMethod<
    [_billingAccessController: AddressLike],
    [void],
    "nonpayable"
  >;

  setConfig: TypedContractMethod<
    [
      _signers: AddressLike[],
      _transmitters: AddressLike[],
      _threshold: BigNumberish,
      _encodedConfigVersion: BigNumberish,
      _encoded: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setPayees: TypedContractMethod<
    [_transmitters: AddressLike[], _payees: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setRequesterAccessController: TypedContractMethod<
    [_requesterAccessController: AddressLike],
    [void],
    "nonpayable"
  >;

  setValidator: TypedContractMethod<
    [_newValidator: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "nonpayable"
  >;

  transferPayeeship: TypedContractMethod<
    [_transmitter: AddressLike, _proposed: AddressLike],
    [void],
    "nonpayable"
  >;

  transmit: TypedContractMethod<
    [_report: BytesLike, _rs: BytesLike[], _ss: BytesLike[], _rawVs: BytesLike],
    [void],
    "nonpayable"
  >;

  transmitters: TypedContractMethod<[], [string[]], "view">;

  validator: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  withdrawFunds: TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawPayment: TypedContractMethod<
    [_transmitter: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LINK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptPayeeship"
  ): TypedContractMethod<[_transmitter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addAccess"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "billingAccessController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "disableAccessCheck"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableAccessCheck"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAnswer"
  ): TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBilling"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        maximumGasPrice: bigint;
        reasonableGasPrice: bigint;
        microLinkPerEth: bigint;
        linkGweiPerObservation: bigint;
        linkGweiPerTransmission: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoundData"
  ): TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimestamp"
  ): TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<
    [_user: AddressLike, _calldata: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestAnswer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestConfigDetails"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        configCount: bigint;
        blockNumber: bigint;
        configDigest: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestRound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestRoundData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestTransmissionDetails"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, bigint, bigint, bigint] & {
        configDigest: string;
        epoch: bigint;
        round: bigint;
        latestAnswer: bigint;
        latestTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "linkAvailableForPayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxAnswer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minAnswer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleObservationCount"
  ): TypedContractMethod<[_signerOrTransmitter: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owedPayment"
  ): TypedContractMethod<[_transmitter: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAccess"
  ): TypedContractMethod<[_user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestNewRound"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "requesterAccessController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBilling"
  ): TypedContractMethod<
    [
      _maximumGasPrice: BigNumberish,
      _reasonableGasPrice: BigNumberish,
      _microLinkPerEth: BigNumberish,
      _linkGweiPerObservation: BigNumberish,
      _linkGweiPerTransmission: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBillingAccessController"
  ): TypedContractMethod<
    [_billingAccessController: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      _signers: AddressLike[],
      _transmitters: AddressLike[],
      _threshold: BigNumberish,
      _encodedConfigVersion: BigNumberish,
      _encoded: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPayees"
  ): TypedContractMethod<
    [_transmitters: AddressLike[], _payees: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRequesterAccessController"
  ): TypedContractMethod<
    [_requesterAccessController: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setValidator"
  ): TypedContractMethod<[_newValidator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPayeeship"
  ): TypedContractMethod<
    [_transmitter: AddressLike, _proposed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transmit"
  ): TypedContractMethod<
    [_report: BytesLike, _rs: BytesLike[], _ss: BytesLike[], _rawVs: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transmitters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "validator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [_recipient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawPayment"
  ): TypedContractMethod<[_transmitter: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddedAccess"
  ): TypedContractEvent<
    AddedAccessEvent.InputTuple,
    AddedAccessEvent.OutputTuple,
    AddedAccessEvent.OutputObject
  >;
  getEvent(
    key: "AnswerUpdated"
  ): TypedContractEvent<
    AnswerUpdatedEvent.InputTuple,
    AnswerUpdatedEvent.OutputTuple,
    AnswerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BillingAccessControllerSet"
  ): TypedContractEvent<
    BillingAccessControllerSetEvent.InputTuple,
    BillingAccessControllerSetEvent.OutputTuple,
    BillingAccessControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "BillingSet"
  ): TypedContractEvent<
    BillingSetEvent.InputTuple,
    BillingSetEvent.OutputTuple,
    BillingSetEvent.OutputObject
  >;
  getEvent(
    key: "CheckAccessDisabled"
  ): TypedContractEvent<
    CheckAccessDisabledEvent.InputTuple,
    CheckAccessDisabledEvent.OutputTuple,
    CheckAccessDisabledEvent.OutputObject
  >;
  getEvent(
    key: "CheckAccessEnabled"
  ): TypedContractEvent<
    CheckAccessEnabledEvent.InputTuple,
    CheckAccessEnabledEvent.OutputTuple,
    CheckAccessEnabledEvent.OutputObject
  >;
  getEvent(
    key: "ConfigSet"
  ): TypedContractEvent<
    ConfigSetEvent.InputTuple,
    ConfigSetEvent.OutputTuple,
    ConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "NewRound"
  ): TypedContractEvent<
    NewRoundEvent.InputTuple,
    NewRoundEvent.OutputTuple,
    NewRoundEvent.OutputObject
  >;
  getEvent(
    key: "NewTransmission"
  ): TypedContractEvent<
    NewTransmissionEvent.InputTuple,
    NewTransmissionEvent.OutputTuple,
    NewTransmissionEvent.OutputObject
  >;
  getEvent(
    key: "OraclePaid"
  ): TypedContractEvent<
    OraclePaidEvent.InputTuple,
    OraclePaidEvent.OutputTuple,
    OraclePaidEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PayeeshipTransferRequested"
  ): TypedContractEvent<
    PayeeshipTransferRequestedEvent.InputTuple,
    PayeeshipTransferRequestedEvent.OutputTuple,
    PayeeshipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "PayeeshipTransferred"
  ): TypedContractEvent<
    PayeeshipTransferredEvent.InputTuple,
    PayeeshipTransferredEvent.OutputTuple,
    PayeeshipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemovedAccess"
  ): TypedContractEvent<
    RemovedAccessEvent.InputTuple,
    RemovedAccessEvent.OutputTuple,
    RemovedAccessEvent.OutputObject
  >;
  getEvent(
    key: "RequesterAccessControllerSet"
  ): TypedContractEvent<
    RequesterAccessControllerSetEvent.InputTuple,
    RequesterAccessControllerSetEvent.OutputTuple,
    RequesterAccessControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "RoundRequested"
  ): TypedContractEvent<
    RoundRequestedEvent.InputTuple,
    RoundRequestedEvent.OutputTuple,
    RoundRequestedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorUpdated"
  ): TypedContractEvent<
    ValidatorUpdatedEvent.InputTuple,
    ValidatorUpdatedEvent.OutputTuple,
    ValidatorUpdatedEvent.OutputObject
  >;

  filters: {
    "AddedAccess(address)": TypedContractEvent<
      AddedAccessEvent.InputTuple,
      AddedAccessEvent.OutputTuple,
      AddedAccessEvent.OutputObject
    >;
    AddedAccess: TypedContractEvent<
      AddedAccessEvent.InputTuple,
      AddedAccessEvent.OutputTuple,
      AddedAccessEvent.OutputObject
    >;

    "AnswerUpdated(int256,uint256,uint256)": TypedContractEvent<
      AnswerUpdatedEvent.InputTuple,
      AnswerUpdatedEvent.OutputTuple,
      AnswerUpdatedEvent.OutputObject
    >;
    AnswerUpdated: TypedContractEvent<
      AnswerUpdatedEvent.InputTuple,
      AnswerUpdatedEvent.OutputTuple,
      AnswerUpdatedEvent.OutputObject
    >;

    "BillingAccessControllerSet(address,address)": TypedContractEvent<
      BillingAccessControllerSetEvent.InputTuple,
      BillingAccessControllerSetEvent.OutputTuple,
      BillingAccessControllerSetEvent.OutputObject
    >;
    BillingAccessControllerSet: TypedContractEvent<
      BillingAccessControllerSetEvent.InputTuple,
      BillingAccessControllerSetEvent.OutputTuple,
      BillingAccessControllerSetEvent.OutputObject
    >;

    "BillingSet(uint32,uint32,uint32,uint32,uint32)": TypedContractEvent<
      BillingSetEvent.InputTuple,
      BillingSetEvent.OutputTuple,
      BillingSetEvent.OutputObject
    >;
    BillingSet: TypedContractEvent<
      BillingSetEvent.InputTuple,
      BillingSetEvent.OutputTuple,
      BillingSetEvent.OutputObject
    >;

    "CheckAccessDisabled()": TypedContractEvent<
      CheckAccessDisabledEvent.InputTuple,
      CheckAccessDisabledEvent.OutputTuple,
      CheckAccessDisabledEvent.OutputObject
    >;
    CheckAccessDisabled: TypedContractEvent<
      CheckAccessDisabledEvent.InputTuple,
      CheckAccessDisabledEvent.OutputTuple,
      CheckAccessDisabledEvent.OutputObject
    >;

    "CheckAccessEnabled()": TypedContractEvent<
      CheckAccessEnabledEvent.InputTuple,
      CheckAccessEnabledEvent.OutputTuple,
      CheckAccessEnabledEvent.OutputObject
    >;
    CheckAccessEnabled: TypedContractEvent<
      CheckAccessEnabledEvent.InputTuple,
      CheckAccessEnabledEvent.OutputTuple,
      CheckAccessEnabledEvent.OutputObject
    >;

    "ConfigSet(uint32,uint64,address[],address[],uint8,uint64,bytes)": TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;
    ConfigSet: TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;

    "NewRound(uint256,address,uint256)": TypedContractEvent<
      NewRoundEvent.InputTuple,
      NewRoundEvent.OutputTuple,
      NewRoundEvent.OutputObject
    >;
    NewRound: TypedContractEvent<
      NewRoundEvent.InputTuple,
      NewRoundEvent.OutputTuple,
      NewRoundEvent.OutputObject
    >;

    "NewTransmission(uint32,int192,address,int192[],bytes,bytes32)": TypedContractEvent<
      NewTransmissionEvent.InputTuple,
      NewTransmissionEvent.OutputTuple,
      NewTransmissionEvent.OutputObject
    >;
    NewTransmission: TypedContractEvent<
      NewTransmissionEvent.InputTuple,
      NewTransmissionEvent.OutputTuple,
      NewTransmissionEvent.OutputObject
    >;

    "OraclePaid(address,address,uint256)": TypedContractEvent<
      OraclePaidEvent.InputTuple,
      OraclePaidEvent.OutputTuple,
      OraclePaidEvent.OutputObject
    >;
    OraclePaid: TypedContractEvent<
      OraclePaidEvent.InputTuple,
      OraclePaidEvent.OutputTuple,
      OraclePaidEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PayeeshipTransferRequested(address,address,address)": TypedContractEvent<
      PayeeshipTransferRequestedEvent.InputTuple,
      PayeeshipTransferRequestedEvent.OutputTuple,
      PayeeshipTransferRequestedEvent.OutputObject
    >;
    PayeeshipTransferRequested: TypedContractEvent<
      PayeeshipTransferRequestedEvent.InputTuple,
      PayeeshipTransferRequestedEvent.OutputTuple,
      PayeeshipTransferRequestedEvent.OutputObject
    >;

    "PayeeshipTransferred(address,address,address)": TypedContractEvent<
      PayeeshipTransferredEvent.InputTuple,
      PayeeshipTransferredEvent.OutputTuple,
      PayeeshipTransferredEvent.OutputObject
    >;
    PayeeshipTransferred: TypedContractEvent<
      PayeeshipTransferredEvent.InputTuple,
      PayeeshipTransferredEvent.OutputTuple,
      PayeeshipTransferredEvent.OutputObject
    >;

    "RemovedAccess(address)": TypedContractEvent<
      RemovedAccessEvent.InputTuple,
      RemovedAccessEvent.OutputTuple,
      RemovedAccessEvent.OutputObject
    >;
    RemovedAccess: TypedContractEvent<
      RemovedAccessEvent.InputTuple,
      RemovedAccessEvent.OutputTuple,
      RemovedAccessEvent.OutputObject
    >;

    "RequesterAccessControllerSet(address,address)": TypedContractEvent<
      RequesterAccessControllerSetEvent.InputTuple,
      RequesterAccessControllerSetEvent.OutputTuple,
      RequesterAccessControllerSetEvent.OutputObject
    >;
    RequesterAccessControllerSet: TypedContractEvent<
      RequesterAccessControllerSetEvent.InputTuple,
      RequesterAccessControllerSetEvent.OutputTuple,
      RequesterAccessControllerSetEvent.OutputObject
    >;

    "RoundRequested(address,bytes16,uint32,uint8)": TypedContractEvent<
      RoundRequestedEvent.InputTuple,
      RoundRequestedEvent.OutputTuple,
      RoundRequestedEvent.OutputObject
    >;
    RoundRequested: TypedContractEvent<
      RoundRequestedEvent.InputTuple,
      RoundRequestedEvent.OutputTuple,
      RoundRequestedEvent.OutputObject
    >;

    "ValidatorUpdated(address,address)": TypedContractEvent<
      ValidatorUpdatedEvent.InputTuple,
      ValidatorUpdatedEvent.OutputTuple,
      ValidatorUpdatedEvent.OutputObject
    >;
    ValidatorUpdated: TypedContractEvent<
      ValidatorUpdatedEvent.InputTuple,
      ValidatorUpdatedEvent.OutputTuple,
      ValidatorUpdatedEvent.OutputObject
    >;
  };
}
