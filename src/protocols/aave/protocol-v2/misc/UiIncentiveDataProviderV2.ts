/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IUiIncentiveDataProviderV2 {
  export type IncentiveDataStruct = {
    emissionPerSecond: BigNumberish;
    incentivesLastUpdateTimestamp: BigNumberish;
    tokenIncentivesIndex: BigNumberish;
    emissionEndTimestamp: BigNumberish;
    tokenAddress: AddressLike;
    rewardTokenAddress: AddressLike;
    incentiveControllerAddress: AddressLike;
    rewardTokenDecimals: BigNumberish;
    precision: BigNumberish;
  };

  export type IncentiveDataStructOutput = [
    emissionPerSecond: bigint,
    incentivesLastUpdateTimestamp: bigint,
    tokenIncentivesIndex: bigint,
    emissionEndTimestamp: bigint,
    tokenAddress: string,
    rewardTokenAddress: string,
    incentiveControllerAddress: string,
    rewardTokenDecimals: bigint,
    precision: bigint
  ] & {
    emissionPerSecond: bigint;
    incentivesLastUpdateTimestamp: bigint;
    tokenIncentivesIndex: bigint;
    emissionEndTimestamp: bigint;
    tokenAddress: string;
    rewardTokenAddress: string;
    incentiveControllerAddress: string;
    rewardTokenDecimals: bigint;
    precision: bigint;
  };

  export type AggregatedReserveIncentiveDataStruct = {
    underlyingAsset: AddressLike;
    aIncentiveData: IUiIncentiveDataProviderV2.IncentiveDataStruct;
    vIncentiveData: IUiIncentiveDataProviderV2.IncentiveDataStruct;
    sIncentiveData: IUiIncentiveDataProviderV2.IncentiveDataStruct;
  };

  export type AggregatedReserveIncentiveDataStructOutput = [
    underlyingAsset: string,
    aIncentiveData: IUiIncentiveDataProviderV2.IncentiveDataStructOutput,
    vIncentiveData: IUiIncentiveDataProviderV2.IncentiveDataStructOutput,
    sIncentiveData: IUiIncentiveDataProviderV2.IncentiveDataStructOutput
  ] & {
    underlyingAsset: string;
    aIncentiveData: IUiIncentiveDataProviderV2.IncentiveDataStructOutput;
    vIncentiveData: IUiIncentiveDataProviderV2.IncentiveDataStructOutput;
    sIncentiveData: IUiIncentiveDataProviderV2.IncentiveDataStructOutput;
  };

  export type UserIncentiveDataStruct = {
    tokenincentivesUserIndex: BigNumberish;
    userUnclaimedRewards: BigNumberish;
    tokenAddress: AddressLike;
    rewardTokenAddress: AddressLike;
    incentiveControllerAddress: AddressLike;
    rewardTokenDecimals: BigNumberish;
  };

  export type UserIncentiveDataStructOutput = [
    tokenincentivesUserIndex: bigint,
    userUnclaimedRewards: bigint,
    tokenAddress: string,
    rewardTokenAddress: string,
    incentiveControllerAddress: string,
    rewardTokenDecimals: bigint
  ] & {
    tokenincentivesUserIndex: bigint;
    userUnclaimedRewards: bigint;
    tokenAddress: string;
    rewardTokenAddress: string;
    incentiveControllerAddress: string;
    rewardTokenDecimals: bigint;
  };

  export type UserReserveIncentiveDataStruct = {
    underlyingAsset: AddressLike;
    aTokenIncentivesUserData: IUiIncentiveDataProviderV2.UserIncentiveDataStruct;
    vTokenIncentivesUserData: IUiIncentiveDataProviderV2.UserIncentiveDataStruct;
    sTokenIncentivesUserData: IUiIncentiveDataProviderV2.UserIncentiveDataStruct;
  };

  export type UserReserveIncentiveDataStructOutput = [
    underlyingAsset: string,
    aTokenIncentivesUserData: IUiIncentiveDataProviderV2.UserIncentiveDataStructOutput,
    vTokenIncentivesUserData: IUiIncentiveDataProviderV2.UserIncentiveDataStructOutput,
    sTokenIncentivesUserData: IUiIncentiveDataProviderV2.UserIncentiveDataStructOutput
  ] & {
    underlyingAsset: string;
    aTokenIncentivesUserData: IUiIncentiveDataProviderV2.UserIncentiveDataStructOutput;
    vTokenIncentivesUserData: IUiIncentiveDataProviderV2.UserIncentiveDataStructOutput;
    sTokenIncentivesUserData: IUiIncentiveDataProviderV2.UserIncentiveDataStructOutput;
  };
}

export interface UiIncentiveDataProviderV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFullReservesIncentiveData"
      | "getReservesIncentivesData"
      | "getUserReservesIncentivesData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFullReservesIncentiveData",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesIncentivesData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReservesIncentivesData",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFullReservesIncentiveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesIncentivesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReservesIncentivesData",
    data: BytesLike
  ): Result;
}

export interface UiIncentiveDataProviderV2 extends BaseContract {
  connect(runner?: ContractRunner | null): UiIncentiveDataProviderV2;
  waitForDeployment(): Promise<this>;

  interface: UiIncentiveDataProviderV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFullReservesIncentiveData: TypedContractMethod<
    [provider: AddressLike, user: AddressLike],
    [
      [
        IUiIncentiveDataProviderV2.AggregatedReserveIncentiveDataStructOutput[],
        IUiIncentiveDataProviderV2.UserReserveIncentiveDataStructOutput[]
      ]
    ],
    "view"
  >;

  getReservesIncentivesData: TypedContractMethod<
    [provider: AddressLike],
    [IUiIncentiveDataProviderV2.AggregatedReserveIncentiveDataStructOutput[]],
    "view"
  >;

  getUserReservesIncentivesData: TypedContractMethod<
    [provider: AddressLike, user: AddressLike],
    [IUiIncentiveDataProviderV2.UserReserveIncentiveDataStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFullReservesIncentiveData"
  ): TypedContractMethod<
    [provider: AddressLike, user: AddressLike],
    [
      [
        IUiIncentiveDataProviderV2.AggregatedReserveIncentiveDataStructOutput[],
        IUiIncentiveDataProviderV2.UserReserveIncentiveDataStructOutput[]
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReservesIncentivesData"
  ): TypedContractMethod<
    [provider: AddressLike],
    [IUiIncentiveDataProviderV2.AggregatedReserveIncentiveDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserReservesIncentivesData"
  ): TypedContractMethod<
    [provider: AddressLike, user: AddressLike],
    [IUiIncentiveDataProviderV2.UserReserveIncentiveDataStructOutput[]],
    "view"
  >;

  filters: {};
}
