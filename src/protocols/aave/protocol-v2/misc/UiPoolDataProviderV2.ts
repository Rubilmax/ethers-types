/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace IUiPoolDataProviderV2 {
  export type AggregatedReserveDataStruct = {
    underlyingAsset: string;
    name: string;
    symbol: string;
    decimals: BigNumberish;
    baseLTVasCollateral: BigNumberish;
    reserveLiquidationThreshold: BigNumberish;
    reserveLiquidationBonus: BigNumberish;
    reserveFactor: BigNumberish;
    usageAsCollateralEnabled: boolean;
    borrowingEnabled: boolean;
    stableBorrowRateEnabled: boolean;
    isActive: boolean;
    isFrozen: boolean;
    liquidityIndex: BigNumberish;
    variableBorrowIndex: BigNumberish;
    liquidityRate: BigNumberish;
    variableBorrowRate: BigNumberish;
    stableBorrowRate: BigNumberish;
    lastUpdateTimestamp: BigNumberish;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    availableLiquidity: BigNumberish;
    totalPrincipalStableDebt: BigNumberish;
    averageStableRate: BigNumberish;
    stableDebtLastUpdateTimestamp: BigNumberish;
    totalScaledVariableDebt: BigNumberish;
    priceInMarketReferenceCurrency: BigNumberish;
    variableRateSlope1: BigNumberish;
    variableRateSlope2: BigNumberish;
    stableRateSlope1: BigNumberish;
    stableRateSlope2: BigNumberish;
  };

  export type AggregatedReserveDataStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    underlyingAsset: string;
    name: string;
    symbol: string;
    decimals: BigNumber;
    baseLTVasCollateral: BigNumber;
    reserveLiquidationThreshold: BigNumber;
    reserveLiquidationBonus: BigNumber;
    reserveFactor: BigNumber;
    usageAsCollateralEnabled: boolean;
    borrowingEnabled: boolean;
    stableBorrowRateEnabled: boolean;
    isActive: boolean;
    isFrozen: boolean;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    liquidityRate: BigNumber;
    variableBorrowRate: BigNumber;
    stableBorrowRate: BigNumber;
    lastUpdateTimestamp: number;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    availableLiquidity: BigNumber;
    totalPrincipalStableDebt: BigNumber;
    averageStableRate: BigNumber;
    stableDebtLastUpdateTimestamp: BigNumber;
    totalScaledVariableDebt: BigNumber;
    priceInMarketReferenceCurrency: BigNumber;
    variableRateSlope1: BigNumber;
    variableRateSlope2: BigNumber;
    stableRateSlope1: BigNumber;
    stableRateSlope2: BigNumber;
  };

  export type BaseCurrencyInfoStruct = {
    marketReferenceCurrencyUnit: BigNumberish;
    marketReferenceCurrencyPriceInUsd: BigNumberish;
    networkBaseTokenPriceInUsd: BigNumberish;
    networkBaseTokenPriceDecimals: BigNumberish;
  };

  export type BaseCurrencyInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    marketReferenceCurrencyUnit: BigNumber;
    marketReferenceCurrencyPriceInUsd: BigNumber;
    networkBaseTokenPriceInUsd: BigNumber;
    networkBaseTokenPriceDecimals: number;
  };

  export type UserReserveDataStruct = {
    underlyingAsset: string;
    scaledATokenBalance: BigNumberish;
    usageAsCollateralEnabledOnUser: boolean;
    stableBorrowRate: BigNumberish;
    scaledVariableDebt: BigNumberish;
    principalStableDebt: BigNumberish;
    stableBorrowLastUpdateTimestamp: BigNumberish;
  };

  export type UserReserveDataStructOutput = [
    string,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    underlyingAsset: string;
    scaledATokenBalance: BigNumber;
    usageAsCollateralEnabledOnUser: boolean;
    stableBorrowRate: BigNumber;
    scaledVariableDebt: BigNumber;
    principalStableDebt: BigNumber;
    stableBorrowLastUpdateTimestamp: BigNumber;
  };
}

export interface UiPoolDataProviderV2Interface extends utils.Interface {
  functions: {
    "ETH_CURRENCY_UNIT()": FunctionFragment;
    "MKRAddress()": FunctionFragment;
    "bytes32ToString(bytes32)": FunctionFragment;
    "getReservesData(address)": FunctionFragment;
    "getReservesList(address)": FunctionFragment;
    "getUserReservesData(address,address)": FunctionFragment;
    "marketReferenceCurrencyPriceInUsdProxyAggregator()": FunctionFragment;
    "networkBaseTokenPriceInUsdProxyAggregator()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ETH_CURRENCY_UNIT"
      | "MKRAddress"
      | "bytes32ToString"
      | "getReservesData"
      | "getReservesList"
      | "getUserReservesData"
      | "marketReferenceCurrencyPriceInUsdProxyAggregator"
      | "networkBaseTokenPriceInUsdProxyAggregator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ETH_CURRENCY_UNIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MKRAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReservesData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketReferenceCurrencyPriceInUsdProxyAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkBaseTokenPriceInUsdProxyAggregator",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_CURRENCY_UNIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MKRAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReservesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketReferenceCurrencyPriceInUsdProxyAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkBaseTokenPriceInUsdProxyAggregator",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UiPoolDataProviderV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UiPoolDataProviderV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MKRAddress(overrides?: CallOverrides): Promise<[string]>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        IUiPoolDataProviderV2.AggregatedReserveDataStructOutput[],
        IUiPoolDataProviderV2.BaseCurrencyInfoStructOutput
      ]
    >;

    getReservesList(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[IUiPoolDataProviderV2.UserReserveDataStructOutput[]]>;

    marketReferenceCurrencyPriceInUsdProxyAggregator(
      overrides?: CallOverrides
    ): Promise<[string]>;

    networkBaseTokenPriceInUsdProxyAggregator(
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  MKRAddress(overrides?: CallOverrides): Promise<string>;

  bytes32ToString(
    _bytes32: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getReservesData(
    provider: string,
    overrides?: CallOverrides
  ): Promise<
    [
      IUiPoolDataProviderV2.AggregatedReserveDataStructOutput[],
      IUiPoolDataProviderV2.BaseCurrencyInfoStructOutput
    ]
  >;

  getReservesList(
    provider: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserReservesData(
    provider: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<IUiPoolDataProviderV2.UserReserveDataStructOutput[]>;

  marketReferenceCurrencyPriceInUsdProxyAggregator(
    overrides?: CallOverrides
  ): Promise<string>;

  networkBaseTokenPriceInUsdProxyAggregator(
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    MKRAddress(overrides?: CallOverrides): Promise<string>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        IUiPoolDataProviderV2.AggregatedReserveDataStructOutput[],
        IUiPoolDataProviderV2.BaseCurrencyInfoStructOutput
      ]
    >;

    getReservesList(
      provider: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<IUiPoolDataProviderV2.UserReserveDataStructOutput[]>;

    marketReferenceCurrencyPriceInUsdProxyAggregator(
      overrides?: CallOverrides
    ): Promise<string>;

    networkBaseTokenPriceInUsdProxyAggregator(
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    MKRAddress(overrides?: CallOverrides): Promise<BigNumber>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservesList(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketReferenceCurrencyPriceInUsdProxyAggregator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkBaseTokenPriceInUsdProxyAggregator(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MKRAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservesList(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketReferenceCurrencyPriceInUsdProxyAggregator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkBaseTokenPriceInUsdProxyAggregator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
