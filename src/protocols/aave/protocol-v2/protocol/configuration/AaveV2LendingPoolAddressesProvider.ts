/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface AaveV2LendingPoolAddressesProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAddress"
      | "getEmergencyAdmin"
      | "getLendingPool"
      | "getLendingPoolCollateralManager"
      | "getLendingPoolConfigurator"
      | "getLendingRateOracle"
      | "getMarketId"
      | "getPoolAdmin"
      | "getPriceOracle"
      | "owner"
      | "renounceOwnership"
      | "setAddress"
      | "setAddressAsProxy"
      | "setEmergencyAdmin"
      | "setLendingPoolCollateralManager"
      | "setLendingPoolConfiguratorImpl"
      | "setLendingPoolImpl"
      | "setLendingRateOracle"
      | "setMarketId"
      | "setPoolAdmin"
      | "setPriceOracle"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressSet"
      | "ConfigurationAdminUpdated"
      | "EmergencyAdminUpdated"
      | "LendingPoolCollateralManagerUpdated"
      | "LendingPoolConfiguratorUpdated"
      | "LendingPoolUpdated"
      | "LendingRateOracleUpdated"
      | "MarketIdSet"
      | "OwnershipTransferred"
      | "PriceOracleUpdated"
      | "ProxyCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmergencyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolCollateralManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingRateOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressAsProxy",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolCollateralManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolConfiguratorImpl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolImpl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingRateOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setMarketId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPoolAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolCollateralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddressAsProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolCollateralManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolConfiguratorImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AddressSetEvent {
  export type InputTuple = [
    id: BytesLike,
    newAddress: AddressLike,
    hasProxy: boolean
  ];
  export type OutputTuple = [id: string, newAddress: string, hasProxy: boolean];
  export interface OutputObject {
    id: string;
    newAddress: string;
    hasProxy: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigurationAdminUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyAdminUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LendingPoolCollateralManagerUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LendingPoolConfiguratorUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LendingPoolUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LendingRateOracleUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketIdSetEvent {
  export type InputTuple = [newMarketId: string];
  export type OutputTuple = [newMarketId: string];
  export interface OutputObject {
    newMarketId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceOracleUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyCreatedEvent {
  export type InputTuple = [id: BytesLike, newAddress: AddressLike];
  export type OutputTuple = [id: string, newAddress: string];
  export interface OutputObject {
    id: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AaveV2LendingPoolAddressesProvider extends BaseContract {
  connect(runner?: ContractRunner | null): AaveV2LendingPoolAddressesProvider;
  waitForDeployment(): Promise<this>;

  interface: AaveV2LendingPoolAddressesProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAddress: TypedContractMethod<[id: BytesLike], [string], "view">;

  getEmergencyAdmin: TypedContractMethod<[], [string], "view">;

  getLendingPool: TypedContractMethod<[], [string], "view">;

  getLendingPoolCollateralManager: TypedContractMethod<[], [string], "view">;

  getLendingPoolConfigurator: TypedContractMethod<[], [string], "view">;

  getLendingRateOracle: TypedContractMethod<[], [string], "view">;

  getMarketId: TypedContractMethod<[], [string], "view">;

  getPoolAdmin: TypedContractMethod<[], [string], "view">;

  getPriceOracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAddress: TypedContractMethod<
    [id: BytesLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setAddressAsProxy: TypedContractMethod<
    [id: BytesLike, implementationAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setEmergencyAdmin: TypedContractMethod<
    [emergencyAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  setLendingPoolCollateralManager: TypedContractMethod<
    [manager: AddressLike],
    [void],
    "nonpayable"
  >;

  setLendingPoolConfiguratorImpl: TypedContractMethod<
    [configurator: AddressLike],
    [void],
    "nonpayable"
  >;

  setLendingPoolImpl: TypedContractMethod<
    [pool: AddressLike],
    [void],
    "nonpayable"
  >;

  setLendingRateOracle: TypedContractMethod<
    [lendingRateOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setMarketId: TypedContractMethod<[marketId: string], [void], "nonpayable">;

  setPoolAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  setPriceOracle: TypedContractMethod<
    [priceOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEmergencyAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLendingPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLendingPoolCollateralManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLendingPoolConfigurator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLendingRateOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPoolAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPriceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddress"
  ): TypedContractMethod<
    [id: BytesLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAddressAsProxy"
  ): TypedContractMethod<
    [id: BytesLike, implementationAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmergencyAdmin"
  ): TypedContractMethod<[emergencyAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLendingPoolCollateralManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLendingPoolConfiguratorImpl"
  ): TypedContractMethod<[configurator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLendingPoolImpl"
  ): TypedContractMethod<[pool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLendingRateOracle"
  ): TypedContractMethod<
    [lendingRateOracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketId"
  ): TypedContractMethod<[marketId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPoolAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceOracle"
  ): TypedContractMethod<[priceOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddressSet"
  ): TypedContractEvent<
    AddressSetEvent.InputTuple,
    AddressSetEvent.OutputTuple,
    AddressSetEvent.OutputObject
  >;
  getEvent(
    key: "ConfigurationAdminUpdated"
  ): TypedContractEvent<
    ConfigurationAdminUpdatedEvent.InputTuple,
    ConfigurationAdminUpdatedEvent.OutputTuple,
    ConfigurationAdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAdminUpdated"
  ): TypedContractEvent<
    EmergencyAdminUpdatedEvent.InputTuple,
    EmergencyAdminUpdatedEvent.OutputTuple,
    EmergencyAdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LendingPoolCollateralManagerUpdated"
  ): TypedContractEvent<
    LendingPoolCollateralManagerUpdatedEvent.InputTuple,
    LendingPoolCollateralManagerUpdatedEvent.OutputTuple,
    LendingPoolCollateralManagerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LendingPoolConfiguratorUpdated"
  ): TypedContractEvent<
    LendingPoolConfiguratorUpdatedEvent.InputTuple,
    LendingPoolConfiguratorUpdatedEvent.OutputTuple,
    LendingPoolConfiguratorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LendingPoolUpdated"
  ): TypedContractEvent<
    LendingPoolUpdatedEvent.InputTuple,
    LendingPoolUpdatedEvent.OutputTuple,
    LendingPoolUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LendingRateOracleUpdated"
  ): TypedContractEvent<
    LendingRateOracleUpdatedEvent.InputTuple,
    LendingRateOracleUpdatedEvent.OutputTuple,
    LendingRateOracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketIdSet"
  ): TypedContractEvent<
    MarketIdSetEvent.InputTuple,
    MarketIdSetEvent.OutputTuple,
    MarketIdSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceOracleUpdated"
  ): TypedContractEvent<
    PriceOracleUpdatedEvent.InputTuple,
    PriceOracleUpdatedEvent.OutputTuple,
    PriceOracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProxyCreated"
  ): TypedContractEvent<
    ProxyCreatedEvent.InputTuple,
    ProxyCreatedEvent.OutputTuple,
    ProxyCreatedEvent.OutputObject
  >;

  filters: {
    "AddressSet(bytes32,address,bool)": TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;
    AddressSet: TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;

    "ConfigurationAdminUpdated(address)": TypedContractEvent<
      ConfigurationAdminUpdatedEvent.InputTuple,
      ConfigurationAdminUpdatedEvent.OutputTuple,
      ConfigurationAdminUpdatedEvent.OutputObject
    >;
    ConfigurationAdminUpdated: TypedContractEvent<
      ConfigurationAdminUpdatedEvent.InputTuple,
      ConfigurationAdminUpdatedEvent.OutputTuple,
      ConfigurationAdminUpdatedEvent.OutputObject
    >;

    "EmergencyAdminUpdated(address)": TypedContractEvent<
      EmergencyAdminUpdatedEvent.InputTuple,
      EmergencyAdminUpdatedEvent.OutputTuple,
      EmergencyAdminUpdatedEvent.OutputObject
    >;
    EmergencyAdminUpdated: TypedContractEvent<
      EmergencyAdminUpdatedEvent.InputTuple,
      EmergencyAdminUpdatedEvent.OutputTuple,
      EmergencyAdminUpdatedEvent.OutputObject
    >;

    "LendingPoolCollateralManagerUpdated(address)": TypedContractEvent<
      LendingPoolCollateralManagerUpdatedEvent.InputTuple,
      LendingPoolCollateralManagerUpdatedEvent.OutputTuple,
      LendingPoolCollateralManagerUpdatedEvent.OutputObject
    >;
    LendingPoolCollateralManagerUpdated: TypedContractEvent<
      LendingPoolCollateralManagerUpdatedEvent.InputTuple,
      LendingPoolCollateralManagerUpdatedEvent.OutputTuple,
      LendingPoolCollateralManagerUpdatedEvent.OutputObject
    >;

    "LendingPoolConfiguratorUpdated(address)": TypedContractEvent<
      LendingPoolConfiguratorUpdatedEvent.InputTuple,
      LendingPoolConfiguratorUpdatedEvent.OutputTuple,
      LendingPoolConfiguratorUpdatedEvent.OutputObject
    >;
    LendingPoolConfiguratorUpdated: TypedContractEvent<
      LendingPoolConfiguratorUpdatedEvent.InputTuple,
      LendingPoolConfiguratorUpdatedEvent.OutputTuple,
      LendingPoolConfiguratorUpdatedEvent.OutputObject
    >;

    "LendingPoolUpdated(address)": TypedContractEvent<
      LendingPoolUpdatedEvent.InputTuple,
      LendingPoolUpdatedEvent.OutputTuple,
      LendingPoolUpdatedEvent.OutputObject
    >;
    LendingPoolUpdated: TypedContractEvent<
      LendingPoolUpdatedEvent.InputTuple,
      LendingPoolUpdatedEvent.OutputTuple,
      LendingPoolUpdatedEvent.OutputObject
    >;

    "LendingRateOracleUpdated(address)": TypedContractEvent<
      LendingRateOracleUpdatedEvent.InputTuple,
      LendingRateOracleUpdatedEvent.OutputTuple,
      LendingRateOracleUpdatedEvent.OutputObject
    >;
    LendingRateOracleUpdated: TypedContractEvent<
      LendingRateOracleUpdatedEvent.InputTuple,
      LendingRateOracleUpdatedEvent.OutputTuple,
      LendingRateOracleUpdatedEvent.OutputObject
    >;

    "MarketIdSet(string)": TypedContractEvent<
      MarketIdSetEvent.InputTuple,
      MarketIdSetEvent.OutputTuple,
      MarketIdSetEvent.OutputObject
    >;
    MarketIdSet: TypedContractEvent<
      MarketIdSetEvent.InputTuple,
      MarketIdSetEvent.OutputTuple,
      MarketIdSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceOracleUpdated(address)": TypedContractEvent<
      PriceOracleUpdatedEvent.InputTuple,
      PriceOracleUpdatedEvent.OutputTuple,
      PriceOracleUpdatedEvent.OutputObject
    >;
    PriceOracleUpdated: TypedContractEvent<
      PriceOracleUpdatedEvent.InputTuple,
      PriceOracleUpdatedEvent.OutputTuple,
      PriceOracleUpdatedEvent.OutputObject
    >;

    "ProxyCreated(bytes32,address)": TypedContractEvent<
      ProxyCreatedEvent.InputTuple,
      ProxyCreatedEvent.OutputTuple,
      ProxyCreatedEvent.OutputObject
    >;
    ProxyCreated: TypedContractEvent<
      ProxyCreatedEvent.InputTuple,
      ProxyCreatedEvent.OutputTuple,
      ProxyCreatedEvent.OutputObject
    >;
  };
}
