/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface AaveV2DefaultReserveInterestRateStrategyInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "EXCESS_UTILIZATION_RATE"
      | "OPTIMAL_UTILIZATION_RATE"
      | "addressesProvider"
      | "baseVariableBorrowRate"
      | "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
      | "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"
      | "getMaxVariableBorrowRate"
      | "stableRateSlope1"
      | "stableRateSlope2"
      | "variableRateSlope1"
      | "variableRateSlope2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EXCESS_UTILIZATION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMAL_UTILIZATION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseVariableBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVariableBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableRateSlope2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "variableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "variableRateSlope2",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EXCESS_UTILIZATION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMAL_UTILIZATION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableRateSlope2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableRateSlope2",
    data: BytesLike
  ): Result;
}

export interface AaveV2DefaultReserveInterestRateStrategy extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): AaveV2DefaultReserveInterestRateStrategy;
  waitForDeployment(): Promise<this>;

  interface: AaveV2DefaultReserveInterestRateStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXCESS_UTILIZATION_RATE: TypedContractMethod<[], [bigint], "view">;

  OPTIMAL_UTILIZATION_RATE: TypedContractMethod<[], [bigint], "view">;

  addressesProvider: TypedContractMethod<[], [string], "view">;

  baseVariableBorrowRate: TypedContractMethod<[], [bigint], "view">;

  "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractMethod<
    [
      reserve: AddressLike,
      aToken: AddressLike,
      liquidityAdded: BigNumberish,
      liquidityTaken: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)": TypedContractMethod<
    [
      reserve: AddressLike,
      availableLiquidity: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getMaxVariableBorrowRate: TypedContractMethod<[], [bigint], "view">;

  stableRateSlope1: TypedContractMethod<[], [bigint], "view">;

  stableRateSlope2: TypedContractMethod<[], [bigint], "view">;

  variableRateSlope1: TypedContractMethod<[], [bigint], "view">;

  variableRateSlope2: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXCESS_UTILIZATION_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPTIMAL_UTILIZATION_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addressesProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseVariableBorrowRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      reserve: AddressLike,
      aToken: AddressLike,
      liquidityAdded: BigNumberish,
      liquidityTaken: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      reserve: AddressLike,
      availableLiquidity: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxVariableBorrowRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stableRateSlope1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stableRateSlope2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "variableRateSlope1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "variableRateSlope2"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
