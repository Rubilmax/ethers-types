/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface L2EncoderInterface extends utils.Interface {
  functions: {
    "POOL()": FunctionFragment;
    "encodeBorrowParams(address,uint256,uint256,uint16)": FunctionFragment;
    "encodeLiquidationCall(address,address,address,uint256,bool)": FunctionFragment;
    "encodeRebalanceStableBorrowRate(address,address)": FunctionFragment;
    "encodeRepayParams(address,uint256,uint256)": FunctionFragment;
    "encodeRepayWithATokensParams(address,uint256,uint256)": FunctionFragment;
    "encodeRepayWithPermitParams(address,uint256,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "encodeSetUserUseReserveAsCollateral(address,bool)": FunctionFragment;
    "encodeSupplyParams(address,uint256,uint16)": FunctionFragment;
    "encodeSupplyWithPermitParams(address,uint256,uint16,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "encodeSwapBorrowRateMode(address,uint256)": FunctionFragment;
    "encodeWithdrawParams(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "POOL"
      | "encodeBorrowParams"
      | "encodeLiquidationCall"
      | "encodeRebalanceStableBorrowRate"
      | "encodeRepayParams"
      | "encodeRepayWithATokensParams"
      | "encodeRepayWithPermitParams"
      | "encodeSetUserUseReserveAsCollateral"
      | "encodeSupplyParams"
      | "encodeSupplyWithPermitParams"
      | "encodeSwapBorrowRateMode"
      | "encodeWithdrawParams"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "POOL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "encodeBorrowParams",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeLiquidationCall",
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeRebalanceStableBorrowRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeRepayParams",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeRepayWithATokensParams",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeRepayWithPermitParams",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSetUserUseReserveAsCollateral",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSupplyParams",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSupplyWithPermitParams",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeSwapBorrowRateMode",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeWithdrawParams",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "POOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeBorrowParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeLiquidationCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeRebalanceStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeRepayParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeRepayWithATokensParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeRepayWithPermitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeSetUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeSupplyParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeSupplyWithPermitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeSwapBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeWithdrawParams",
    data: BytesLike
  ): Result;

  events: {};
}

export interface L2Encoder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2EncoderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    POOL(overrides?: CallOverrides): Promise<[string]>;

    encodeBorrowParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeLiquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    encodeRebalanceStableBorrowRate(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeRepayParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeRepayWithATokensParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeRepayWithPermitParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    encodeSetUserUseReserveAsCollateral(
      asset: string,
      useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeSupplyParams(
      asset: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeSupplyWithPermitParams(
      asset: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    encodeSwapBorrowRateMode(
      asset: string,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeWithdrawParams(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  POOL(overrides?: CallOverrides): Promise<string>;

  encodeBorrowParams(
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    referralCode: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeLiquidationCall(
    collateralAsset: string,
    debtAsset: string,
    user: string,
    debtToCover: BigNumberish,
    receiveAToken: boolean,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  encodeRebalanceStableBorrowRate(
    asset: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeRepayParams(
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeRepayWithATokensParams(
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeRepayWithPermitParams(
    asset: string,
    amount: BigNumberish,
    interestRateMode: BigNumberish,
    deadline: BigNumberish,
    permitV: BigNumberish,
    permitR: BytesLike,
    permitS: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  encodeSetUserUseReserveAsCollateral(
    asset: string,
    useAsCollateral: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeSupplyParams(
    asset: string,
    amount: BigNumberish,
    referralCode: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeSupplyWithPermitParams(
    asset: string,
    amount: BigNumberish,
    referralCode: BigNumberish,
    deadline: BigNumberish,
    permitV: BigNumberish,
    permitR: BytesLike,
    permitS: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, string]>;

  encodeSwapBorrowRateMode(
    asset: string,
    interestRateMode: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  encodeWithdrawParams(
    asset: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    POOL(overrides?: CallOverrides): Promise<string>;

    encodeBorrowParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeLiquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    encodeRebalanceStableBorrowRate(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeRepayParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeRepayWithATokensParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeRepayWithPermitParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    encodeSetUserUseReserveAsCollateral(
      asset: string,
      useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeSupplyParams(
      asset: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeSupplyWithPermitParams(
      asset: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, string]>;

    encodeSwapBorrowRateMode(
      asset: string,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeWithdrawParams(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    POOL(overrides?: CallOverrides): Promise<BigNumber>;

    encodeBorrowParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeLiquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeRebalanceStableBorrowRate(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeRepayParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeRepayWithATokensParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeRepayWithPermitParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSetUserUseReserveAsCollateral(
      asset: string,
      useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSupplyParams(
      asset: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSupplyWithPermitParams(
      asset: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeSwapBorrowRateMode(
      asset: string,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeWithdrawParams(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeBorrowParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeLiquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeRebalanceStableBorrowRate(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeRepayParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeRepayWithATokensParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeRepayWithPermitParams(
      asset: string,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeSetUserUseReserveAsCollateral(
      asset: string,
      useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeSupplyParams(
      asset: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeSupplyWithPermitParams(
      asset: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeSwapBorrowRateMode(
      asset: string,
      interestRateMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeWithdrawParams(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
