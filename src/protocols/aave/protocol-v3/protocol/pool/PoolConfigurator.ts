/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export declare namespace ConfiguratorInputTypes {
  export type InitReserveInputStruct = {
    aTokenImpl: AddressLike;
    stableDebtTokenImpl: AddressLike;
    variableDebtTokenImpl: AddressLike;
    underlyingAssetDecimals: BigNumberish;
    interestRateStrategyAddress: AddressLike;
    underlyingAsset: AddressLike;
    treasury: AddressLike;
    incentivesController: AddressLike;
    aTokenName: string;
    aTokenSymbol: string;
    variableDebtTokenName: string;
    variableDebtTokenSymbol: string;
    stableDebtTokenName: string;
    stableDebtTokenSymbol: string;
    params: BytesLike;
  };

  export type InitReserveInputStructOutput = [
    aTokenImpl: string,
    stableDebtTokenImpl: string,
    variableDebtTokenImpl: string,
    underlyingAssetDecimals: bigint,
    interestRateStrategyAddress: string,
    underlyingAsset: string,
    treasury: string,
    incentivesController: string,
    aTokenName: string,
    aTokenSymbol: string,
    variableDebtTokenName: string,
    variableDebtTokenSymbol: string,
    stableDebtTokenName: string,
    stableDebtTokenSymbol: string,
    params: string
  ] & {
    aTokenImpl: string;
    stableDebtTokenImpl: string;
    variableDebtTokenImpl: string;
    underlyingAssetDecimals: bigint;
    interestRateStrategyAddress: string;
    underlyingAsset: string;
    treasury: string;
    incentivesController: string;
    aTokenName: string;
    aTokenSymbol: string;
    variableDebtTokenName: string;
    variableDebtTokenSymbol: string;
    stableDebtTokenName: string;
    stableDebtTokenSymbol: string;
    params: string;
  };

  export type UpdateATokenInputStruct = {
    asset: AddressLike;
    treasury: AddressLike;
    incentivesController: AddressLike;
    name: string;
    symbol: string;
    implementation: AddressLike;
    params: BytesLike;
  };

  export type UpdateATokenInputStructOutput = [
    asset: string,
    treasury: string,
    incentivesController: string,
    name: string,
    symbol: string,
    implementation: string,
    params: string
  ] & {
    asset: string;
    treasury: string;
    incentivesController: string;
    name: string;
    symbol: string;
    implementation: string;
    params: string;
  };

  export type UpdateDebtTokenInputStruct = {
    asset: AddressLike;
    incentivesController: AddressLike;
    name: string;
    symbol: string;
    implementation: AddressLike;
    params: BytesLike;
  };

  export type UpdateDebtTokenInputStructOutput = [
    asset: string,
    incentivesController: string,
    name: string,
    symbol: string,
    implementation: string,
    params: string
  ] & {
    asset: string;
    incentivesController: string;
    name: string;
    symbol: string;
    implementation: string;
    params: string;
  };
}

export interface PoolConfiguratorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONFIGURATOR_REVISION"
      | "configureReserveAsCollateral"
      | "dropReserve"
      | "initReserves"
      | "initialize"
      | "setAssetEModeCategory"
      | "setBorrowCap"
      | "setBorrowableInIsolation"
      | "setDebtCeiling"
      | "setEModeCategory"
      | "setLiquidationProtocolFee"
      | "setPoolPause"
      | "setReserveActive"
      | "setReserveBorrowing"
      | "setReserveFactor"
      | "setReserveFlashLoaning"
      | "setReserveFreeze"
      | "setReserveInterestRateStrategyAddress"
      | "setReservePause"
      | "setReserveStableRateBorrowing"
      | "setSiloedBorrowing"
      | "setSupplyCap"
      | "setUnbackedMintCap"
      | "updateAToken"
      | "updateBridgeProtocolFee"
      | "updateFlashloanPremiumToProtocol"
      | "updateFlashloanPremiumTotal"
      | "updateStableDebtToken"
      | "updateVariableDebtToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ATokenUpgraded"
      | "BorrowCapChanged"
      | "BorrowableInIsolationChanged"
      | "BridgeProtocolFeeUpdated"
      | "CollateralConfigurationChanged"
      | "DebtCeilingChanged"
      | "EModeAssetCategoryChanged"
      | "EModeCategoryAdded"
      | "FlashloanPremiumToProtocolUpdated"
      | "FlashloanPremiumTotalUpdated"
      | "LiquidationProtocolFeeChanged"
      | "ReserveActive"
      | "ReserveBorrowing"
      | "ReserveDropped"
      | "ReserveFactorChanged"
      | "ReserveFlashLoaning"
      | "ReserveFrozen"
      | "ReserveInitialized"
      | "ReserveInterestRateStrategyChanged"
      | "ReservePaused"
      | "ReserveStableRateBorrowing"
      | "SiloedBorrowingChanged"
      | "StableDebtTokenUpgraded"
      | "SupplyCapChanged"
      | "UnbackedMintCapChanged"
      | "VariableDebtTokenUpgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONFIGURATOR_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureReserveAsCollateral",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dropReserve",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initReserves",
    values: [ConfiguratorInputTypes.InitReserveInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetEModeCategory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowCap",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowableInIsolation",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtCeiling",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEModeCategory",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationProtocolFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveActive",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveBorrowing",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFlashLoaning",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFreeze",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveInterestRateStrategyAddress",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservePause",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveStableRateBorrowing",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSiloedBorrowing",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyCap",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnbackedMintCap",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAToken",
    values: [ConfiguratorInputTypes.UpdateATokenInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridgeProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlashloanPremiumToProtocol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlashloanPremiumTotal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStableDebtToken",
    values: [ConfiguratorInputTypes.UpdateDebtTokenInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVariableDebtToken",
    values: [ConfiguratorInputTypes.UpdateDebtTokenInputStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONFIGURATOR_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dropReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetEModeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowableInIsolation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEModeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFlashLoaning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveStableRateBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSiloedBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnbackedMintCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridgeProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlashloanPremiumToProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlashloanPremiumTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStableDebtToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVariableDebtToken",
    data: BytesLike
  ): Result;
}

export namespace ATokenUpgradedEvent {
  export type InputTuple = [
    asset: AddressLike,
    proxy: AddressLike,
    implementation: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    proxy: string,
    implementation: string
  ];
  export interface OutputObject {
    asset: string;
    proxy: string;
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowCapChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldBorrowCap: BigNumberish,
    newBorrowCap: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    oldBorrowCap: bigint,
    newBorrowCap: bigint
  ];
  export interface OutputObject {
    asset: string;
    oldBorrowCap: bigint;
    newBorrowCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowableInIsolationChangedEvent {
  export type InputTuple = [asset: AddressLike, borrowable: boolean];
  export type OutputTuple = [asset: string, borrowable: boolean];
  export interface OutputObject {
    asset: string;
    borrowable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeProtocolFeeUpdatedEvent {
  export type InputTuple = [
    oldBridgeProtocolFee: BigNumberish,
    newBridgeProtocolFee: BigNumberish
  ];
  export type OutputTuple = [
    oldBridgeProtocolFee: bigint,
    newBridgeProtocolFee: bigint
  ];
  export interface OutputObject {
    oldBridgeProtocolFee: bigint;
    newBridgeProtocolFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralConfigurationChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    ltv: BigNumberish,
    liquidationThreshold: BigNumberish,
    liquidationBonus: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    ltv: bigint,
    liquidationThreshold: bigint,
    liquidationBonus: bigint
  ];
  export interface OutputObject {
    asset: string;
    ltv: bigint;
    liquidationThreshold: bigint;
    liquidationBonus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebtCeilingChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldDebtCeiling: BigNumberish,
    newDebtCeiling: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    oldDebtCeiling: bigint,
    newDebtCeiling: bigint
  ];
  export interface OutputObject {
    asset: string;
    oldDebtCeiling: bigint;
    newDebtCeiling: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EModeAssetCategoryChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldCategoryId: BigNumberish,
    newCategoryId: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    oldCategoryId: bigint,
    newCategoryId: bigint
  ];
  export interface OutputObject {
    asset: string;
    oldCategoryId: bigint;
    newCategoryId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EModeCategoryAddedEvent {
  export type InputTuple = [
    categoryId: BigNumberish,
    ltv: BigNumberish,
    liquidationThreshold: BigNumberish,
    liquidationBonus: BigNumberish,
    oracle: AddressLike,
    label: string
  ];
  export type OutputTuple = [
    categoryId: bigint,
    ltv: bigint,
    liquidationThreshold: bigint,
    liquidationBonus: bigint,
    oracle: string,
    label: string
  ];
  export interface OutputObject {
    categoryId: bigint;
    ltv: bigint;
    liquidationThreshold: bigint;
    liquidationBonus: bigint;
    oracle: string;
    label: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashloanPremiumToProtocolUpdatedEvent {
  export type InputTuple = [
    oldFlashloanPremiumToProtocol: BigNumberish,
    newFlashloanPremiumToProtocol: BigNumberish
  ];
  export type OutputTuple = [
    oldFlashloanPremiumToProtocol: bigint,
    newFlashloanPremiumToProtocol: bigint
  ];
  export interface OutputObject {
    oldFlashloanPremiumToProtocol: bigint;
    newFlashloanPremiumToProtocol: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashloanPremiumTotalUpdatedEvent {
  export type InputTuple = [
    oldFlashloanPremiumTotal: BigNumberish,
    newFlashloanPremiumTotal: BigNumberish
  ];
  export type OutputTuple = [
    oldFlashloanPremiumTotal: bigint,
    newFlashloanPremiumTotal: bigint
  ];
  export interface OutputObject {
    oldFlashloanPremiumTotal: bigint;
    newFlashloanPremiumTotal: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationProtocolFeeChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldFee: BigNumberish,
    newFee: BigNumberish
  ];
  export type OutputTuple = [asset: string, oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    asset: string;
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveActiveEvent {
  export type InputTuple = [asset: AddressLike, active: boolean];
  export type OutputTuple = [asset: string, active: boolean];
  export interface OutputObject {
    asset: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveBorrowingEvent {
  export type InputTuple = [asset: AddressLike, enabled: boolean];
  export type OutputTuple = [asset: string, enabled: boolean];
  export interface OutputObject {
    asset: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveDroppedEvent {
  export type InputTuple = [asset: AddressLike];
  export type OutputTuple = [asset: string];
  export interface OutputObject {
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFactorChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldReserveFactor: BigNumberish,
    newReserveFactor: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    oldReserveFactor: bigint,
    newReserveFactor: bigint
  ];
  export interface OutputObject {
    asset: string;
    oldReserveFactor: bigint;
    newReserveFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFlashLoaningEvent {
  export type InputTuple = [asset: AddressLike, enabled: boolean];
  export type OutputTuple = [asset: string, enabled: boolean];
  export interface OutputObject {
    asset: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFrozenEvent {
  export type InputTuple = [asset: AddressLike, frozen: boolean];
  export type OutputTuple = [asset: string, frozen: boolean];
  export interface OutputObject {
    asset: string;
    frozen: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveInitializedEvent {
  export type InputTuple = [
    asset: AddressLike,
    aToken: AddressLike,
    stableDebtToken: AddressLike,
    variableDebtToken: AddressLike,
    interestRateStrategyAddress: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    aToken: string,
    stableDebtToken: string,
    variableDebtToken: string,
    interestRateStrategyAddress: string
  ];
  export interface OutputObject {
    asset: string;
    aToken: string;
    stableDebtToken: string;
    variableDebtToken: string;
    interestRateStrategyAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveInterestRateStrategyChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldStrategy: AddressLike,
    newStrategy: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    oldStrategy: string,
    newStrategy: string
  ];
  export interface OutputObject {
    asset: string;
    oldStrategy: string;
    newStrategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReservePausedEvent {
  export type InputTuple = [asset: AddressLike, paused: boolean];
  export type OutputTuple = [asset: string, paused: boolean];
  export interface OutputObject {
    asset: string;
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveStableRateBorrowingEvent {
  export type InputTuple = [asset: AddressLike, enabled: boolean];
  export type OutputTuple = [asset: string, enabled: boolean];
  export interface OutputObject {
    asset: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SiloedBorrowingChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldState: boolean,
    newState: boolean
  ];
  export type OutputTuple = [
    asset: string,
    oldState: boolean,
    newState: boolean
  ];
  export interface OutputObject {
    asset: string;
    oldState: boolean;
    newState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StableDebtTokenUpgradedEvent {
  export type InputTuple = [
    asset: AddressLike,
    proxy: AddressLike,
    implementation: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    proxy: string,
    implementation: string
  ];
  export interface OutputObject {
    asset: string;
    proxy: string;
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyCapChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldSupplyCap: BigNumberish,
    newSupplyCap: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    oldSupplyCap: bigint,
    newSupplyCap: bigint
  ];
  export interface OutputObject {
    asset: string;
    oldSupplyCap: bigint;
    newSupplyCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnbackedMintCapChangedEvent {
  export type InputTuple = [
    asset: AddressLike,
    oldUnbackedMintCap: BigNumberish,
    newUnbackedMintCap: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    oldUnbackedMintCap: bigint,
    newUnbackedMintCap: bigint
  ];
  export interface OutputObject {
    asset: string;
    oldUnbackedMintCap: bigint;
    newUnbackedMintCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VariableDebtTokenUpgradedEvent {
  export type InputTuple = [
    asset: AddressLike,
    proxy: AddressLike,
    implementation: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    proxy: string,
    implementation: string
  ];
  export interface OutputObject {
    asset: string;
    proxy: string;
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoolConfigurator extends BaseContract {
  connect(runner?: ContractRunner | null): PoolConfigurator;
  waitForDeployment(): Promise<this>;

  interface: PoolConfiguratorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONFIGURATOR_REVISION: TypedContractMethod<[], [bigint], "view">;

  configureReserveAsCollateral: TypedContractMethod<
    [
      asset: AddressLike,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  dropReserve: TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;

  initReserves: TypedContractMethod<
    [input: ConfiguratorInputTypes.InitReserveInputStruct[]],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [provider: AddressLike],
    [void],
    "nonpayable"
  >;

  setAssetEModeCategory: TypedContractMethod<
    [asset: AddressLike, newCategoryId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBorrowCap: TypedContractMethod<
    [asset: AddressLike, newBorrowCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBorrowableInIsolation: TypedContractMethod<
    [asset: AddressLike, borrowable: boolean],
    [void],
    "nonpayable"
  >;

  setDebtCeiling: TypedContractMethod<
    [asset: AddressLike, newDebtCeiling: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEModeCategory: TypedContractMethod<
    [
      categoryId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      oracle: AddressLike,
      label: string
    ],
    [void],
    "nonpayable"
  >;

  setLiquidationProtocolFee: TypedContractMethod<
    [asset: AddressLike, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPoolPause: TypedContractMethod<[paused: boolean], [void], "nonpayable">;

  setReserveActive: TypedContractMethod<
    [asset: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  setReserveBorrowing: TypedContractMethod<
    [asset: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setReserveFactor: TypedContractMethod<
    [asset: AddressLike, newReserveFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReserveFlashLoaning: TypedContractMethod<
    [asset: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setReserveFreeze: TypedContractMethod<
    [asset: AddressLike, freeze: boolean],
    [void],
    "nonpayable"
  >;

  setReserveInterestRateStrategyAddress: TypedContractMethod<
    [asset: AddressLike, newRateStrategyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setReservePause: TypedContractMethod<
    [asset: AddressLike, paused: boolean],
    [void],
    "nonpayable"
  >;

  setReserveStableRateBorrowing: TypedContractMethod<
    [asset: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setSiloedBorrowing: TypedContractMethod<
    [asset: AddressLike, newSiloed: boolean],
    [void],
    "nonpayable"
  >;

  setSupplyCap: TypedContractMethod<
    [asset: AddressLike, newSupplyCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUnbackedMintCap: TypedContractMethod<
    [asset: AddressLike, newUnbackedMintCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateAToken: TypedContractMethod<
    [input: ConfiguratorInputTypes.UpdateATokenInputStruct],
    [void],
    "nonpayable"
  >;

  updateBridgeProtocolFee: TypedContractMethod<
    [newBridgeProtocolFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFlashloanPremiumToProtocol: TypedContractMethod<
    [newFlashloanPremiumToProtocol: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFlashloanPremiumTotal: TypedContractMethod<
    [newFlashloanPremiumTotal: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateStableDebtToken: TypedContractMethod<
    [input: ConfiguratorInputTypes.UpdateDebtTokenInputStruct],
    [void],
    "nonpayable"
  >;

  updateVariableDebtToken: TypedContractMethod<
    [input: ConfiguratorInputTypes.UpdateDebtTokenInputStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONFIGURATOR_REVISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "configureReserveAsCollateral"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dropReserve"
  ): TypedContractMethod<[asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initReserves"
  ): TypedContractMethod<
    [input: ConfiguratorInputTypes.InitReserveInputStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[provider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAssetEModeCategory"
  ): TypedContractMethod<
    [asset: AddressLike, newCategoryId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBorrowCap"
  ): TypedContractMethod<
    [asset: AddressLike, newBorrowCap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBorrowableInIsolation"
  ): TypedContractMethod<
    [asset: AddressLike, borrowable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDebtCeiling"
  ): TypedContractMethod<
    [asset: AddressLike, newDebtCeiling: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEModeCategory"
  ): TypedContractMethod<
    [
      categoryId: BigNumberish,
      ltv: BigNumberish,
      liquidationThreshold: BigNumberish,
      liquidationBonus: BigNumberish,
      oracle: AddressLike,
      label: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationProtocolFee"
  ): TypedContractMethod<
    [asset: AddressLike, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPoolPause"
  ): TypedContractMethod<[paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReserveActive"
  ): TypedContractMethod<
    [asset: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveBorrowing"
  ): TypedContractMethod<
    [asset: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveFactor"
  ): TypedContractMethod<
    [asset: AddressLike, newReserveFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveFlashLoaning"
  ): TypedContractMethod<
    [asset: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveFreeze"
  ): TypedContractMethod<
    [asset: AddressLike, freeze: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveInterestRateStrategyAddress"
  ): TypedContractMethod<
    [asset: AddressLike, newRateStrategyAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReservePause"
  ): TypedContractMethod<
    [asset: AddressLike, paused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveStableRateBorrowing"
  ): TypedContractMethod<
    [asset: AddressLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSiloedBorrowing"
  ): TypedContractMethod<
    [asset: AddressLike, newSiloed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSupplyCap"
  ): TypedContractMethod<
    [asset: AddressLike, newSupplyCap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUnbackedMintCap"
  ): TypedContractMethod<
    [asset: AddressLike, newUnbackedMintCap: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAToken"
  ): TypedContractMethod<
    [input: ConfiguratorInputTypes.UpdateATokenInputStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateBridgeProtocolFee"
  ): TypedContractMethod<
    [newBridgeProtocolFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFlashloanPremiumToProtocol"
  ): TypedContractMethod<
    [newFlashloanPremiumToProtocol: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFlashloanPremiumTotal"
  ): TypedContractMethod<
    [newFlashloanPremiumTotal: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStableDebtToken"
  ): TypedContractMethod<
    [input: ConfiguratorInputTypes.UpdateDebtTokenInputStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVariableDebtToken"
  ): TypedContractMethod<
    [input: ConfiguratorInputTypes.UpdateDebtTokenInputStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ATokenUpgraded"
  ): TypedContractEvent<
    ATokenUpgradedEvent.InputTuple,
    ATokenUpgradedEvent.OutputTuple,
    ATokenUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "BorrowCapChanged"
  ): TypedContractEvent<
    BorrowCapChangedEvent.InputTuple,
    BorrowCapChangedEvent.OutputTuple,
    BorrowCapChangedEvent.OutputObject
  >;
  getEvent(
    key: "BorrowableInIsolationChanged"
  ): TypedContractEvent<
    BorrowableInIsolationChangedEvent.InputTuple,
    BorrowableInIsolationChangedEvent.OutputTuple,
    BorrowableInIsolationChangedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeProtocolFeeUpdated"
  ): TypedContractEvent<
    BridgeProtocolFeeUpdatedEvent.InputTuple,
    BridgeProtocolFeeUpdatedEvent.OutputTuple,
    BridgeProtocolFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralConfigurationChanged"
  ): TypedContractEvent<
    CollateralConfigurationChangedEvent.InputTuple,
    CollateralConfigurationChangedEvent.OutputTuple,
    CollateralConfigurationChangedEvent.OutputObject
  >;
  getEvent(
    key: "DebtCeilingChanged"
  ): TypedContractEvent<
    DebtCeilingChangedEvent.InputTuple,
    DebtCeilingChangedEvent.OutputTuple,
    DebtCeilingChangedEvent.OutputObject
  >;
  getEvent(
    key: "EModeAssetCategoryChanged"
  ): TypedContractEvent<
    EModeAssetCategoryChangedEvent.InputTuple,
    EModeAssetCategoryChangedEvent.OutputTuple,
    EModeAssetCategoryChangedEvent.OutputObject
  >;
  getEvent(
    key: "EModeCategoryAdded"
  ): TypedContractEvent<
    EModeCategoryAddedEvent.InputTuple,
    EModeCategoryAddedEvent.OutputTuple,
    EModeCategoryAddedEvent.OutputObject
  >;
  getEvent(
    key: "FlashloanPremiumToProtocolUpdated"
  ): TypedContractEvent<
    FlashloanPremiumToProtocolUpdatedEvent.InputTuple,
    FlashloanPremiumToProtocolUpdatedEvent.OutputTuple,
    FlashloanPremiumToProtocolUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FlashloanPremiumTotalUpdated"
  ): TypedContractEvent<
    FlashloanPremiumTotalUpdatedEvent.InputTuple,
    FlashloanPremiumTotalUpdatedEvent.OutputTuple,
    FlashloanPremiumTotalUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationProtocolFeeChanged"
  ): TypedContractEvent<
    LiquidationProtocolFeeChangedEvent.InputTuple,
    LiquidationProtocolFeeChangedEvent.OutputTuple,
    LiquidationProtocolFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveActive"
  ): TypedContractEvent<
    ReserveActiveEvent.InputTuple,
    ReserveActiveEvent.OutputTuple,
    ReserveActiveEvent.OutputObject
  >;
  getEvent(
    key: "ReserveBorrowing"
  ): TypedContractEvent<
    ReserveBorrowingEvent.InputTuple,
    ReserveBorrowingEvent.OutputTuple,
    ReserveBorrowingEvent.OutputObject
  >;
  getEvent(
    key: "ReserveDropped"
  ): TypedContractEvent<
    ReserveDroppedEvent.InputTuple,
    ReserveDroppedEvent.OutputTuple,
    ReserveDroppedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFactorChanged"
  ): TypedContractEvent<
    ReserveFactorChangedEvent.InputTuple,
    ReserveFactorChangedEvent.OutputTuple,
    ReserveFactorChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFlashLoaning"
  ): TypedContractEvent<
    ReserveFlashLoaningEvent.InputTuple,
    ReserveFlashLoaningEvent.OutputTuple,
    ReserveFlashLoaningEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFrozen"
  ): TypedContractEvent<
    ReserveFrozenEvent.InputTuple,
    ReserveFrozenEvent.OutputTuple,
    ReserveFrozenEvent.OutputObject
  >;
  getEvent(
    key: "ReserveInitialized"
  ): TypedContractEvent<
    ReserveInitializedEvent.InputTuple,
    ReserveInitializedEvent.OutputTuple,
    ReserveInitializedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveInterestRateStrategyChanged"
  ): TypedContractEvent<
    ReserveInterestRateStrategyChangedEvent.InputTuple,
    ReserveInterestRateStrategyChangedEvent.OutputTuple,
    ReserveInterestRateStrategyChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReservePaused"
  ): TypedContractEvent<
    ReservePausedEvent.InputTuple,
    ReservePausedEvent.OutputTuple,
    ReservePausedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveStableRateBorrowing"
  ): TypedContractEvent<
    ReserveStableRateBorrowingEvent.InputTuple,
    ReserveStableRateBorrowingEvent.OutputTuple,
    ReserveStableRateBorrowingEvent.OutputObject
  >;
  getEvent(
    key: "SiloedBorrowingChanged"
  ): TypedContractEvent<
    SiloedBorrowingChangedEvent.InputTuple,
    SiloedBorrowingChangedEvent.OutputTuple,
    SiloedBorrowingChangedEvent.OutputObject
  >;
  getEvent(
    key: "StableDebtTokenUpgraded"
  ): TypedContractEvent<
    StableDebtTokenUpgradedEvent.InputTuple,
    StableDebtTokenUpgradedEvent.OutputTuple,
    StableDebtTokenUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "SupplyCapChanged"
  ): TypedContractEvent<
    SupplyCapChangedEvent.InputTuple,
    SupplyCapChangedEvent.OutputTuple,
    SupplyCapChangedEvent.OutputObject
  >;
  getEvent(
    key: "UnbackedMintCapChanged"
  ): TypedContractEvent<
    UnbackedMintCapChangedEvent.InputTuple,
    UnbackedMintCapChangedEvent.OutputTuple,
    UnbackedMintCapChangedEvent.OutputObject
  >;
  getEvent(
    key: "VariableDebtTokenUpgraded"
  ): TypedContractEvent<
    VariableDebtTokenUpgradedEvent.InputTuple,
    VariableDebtTokenUpgradedEvent.OutputTuple,
    VariableDebtTokenUpgradedEvent.OutputObject
  >;

  filters: {
    "ATokenUpgraded(address,address,address)": TypedContractEvent<
      ATokenUpgradedEvent.InputTuple,
      ATokenUpgradedEvent.OutputTuple,
      ATokenUpgradedEvent.OutputObject
    >;
    ATokenUpgraded: TypedContractEvent<
      ATokenUpgradedEvent.InputTuple,
      ATokenUpgradedEvent.OutputTuple,
      ATokenUpgradedEvent.OutputObject
    >;

    "BorrowCapChanged(address,uint256,uint256)": TypedContractEvent<
      BorrowCapChangedEvent.InputTuple,
      BorrowCapChangedEvent.OutputTuple,
      BorrowCapChangedEvent.OutputObject
    >;
    BorrowCapChanged: TypedContractEvent<
      BorrowCapChangedEvent.InputTuple,
      BorrowCapChangedEvent.OutputTuple,
      BorrowCapChangedEvent.OutputObject
    >;

    "BorrowableInIsolationChanged(address,bool)": TypedContractEvent<
      BorrowableInIsolationChangedEvent.InputTuple,
      BorrowableInIsolationChangedEvent.OutputTuple,
      BorrowableInIsolationChangedEvent.OutputObject
    >;
    BorrowableInIsolationChanged: TypedContractEvent<
      BorrowableInIsolationChangedEvent.InputTuple,
      BorrowableInIsolationChangedEvent.OutputTuple,
      BorrowableInIsolationChangedEvent.OutputObject
    >;

    "BridgeProtocolFeeUpdated(uint256,uint256)": TypedContractEvent<
      BridgeProtocolFeeUpdatedEvent.InputTuple,
      BridgeProtocolFeeUpdatedEvent.OutputTuple,
      BridgeProtocolFeeUpdatedEvent.OutputObject
    >;
    BridgeProtocolFeeUpdated: TypedContractEvent<
      BridgeProtocolFeeUpdatedEvent.InputTuple,
      BridgeProtocolFeeUpdatedEvent.OutputTuple,
      BridgeProtocolFeeUpdatedEvent.OutputObject
    >;

    "CollateralConfigurationChanged(address,uint256,uint256,uint256)": TypedContractEvent<
      CollateralConfigurationChangedEvent.InputTuple,
      CollateralConfigurationChangedEvent.OutputTuple,
      CollateralConfigurationChangedEvent.OutputObject
    >;
    CollateralConfigurationChanged: TypedContractEvent<
      CollateralConfigurationChangedEvent.InputTuple,
      CollateralConfigurationChangedEvent.OutputTuple,
      CollateralConfigurationChangedEvent.OutputObject
    >;

    "DebtCeilingChanged(address,uint256,uint256)": TypedContractEvent<
      DebtCeilingChangedEvent.InputTuple,
      DebtCeilingChangedEvent.OutputTuple,
      DebtCeilingChangedEvent.OutputObject
    >;
    DebtCeilingChanged: TypedContractEvent<
      DebtCeilingChangedEvent.InputTuple,
      DebtCeilingChangedEvent.OutputTuple,
      DebtCeilingChangedEvent.OutputObject
    >;

    "EModeAssetCategoryChanged(address,uint8,uint8)": TypedContractEvent<
      EModeAssetCategoryChangedEvent.InputTuple,
      EModeAssetCategoryChangedEvent.OutputTuple,
      EModeAssetCategoryChangedEvent.OutputObject
    >;
    EModeAssetCategoryChanged: TypedContractEvent<
      EModeAssetCategoryChangedEvent.InputTuple,
      EModeAssetCategoryChangedEvent.OutputTuple,
      EModeAssetCategoryChangedEvent.OutputObject
    >;

    "EModeCategoryAdded(uint8,uint256,uint256,uint256,address,string)": TypedContractEvent<
      EModeCategoryAddedEvent.InputTuple,
      EModeCategoryAddedEvent.OutputTuple,
      EModeCategoryAddedEvent.OutputObject
    >;
    EModeCategoryAdded: TypedContractEvent<
      EModeCategoryAddedEvent.InputTuple,
      EModeCategoryAddedEvent.OutputTuple,
      EModeCategoryAddedEvent.OutputObject
    >;

    "FlashloanPremiumToProtocolUpdated(uint128,uint128)": TypedContractEvent<
      FlashloanPremiumToProtocolUpdatedEvent.InputTuple,
      FlashloanPremiumToProtocolUpdatedEvent.OutputTuple,
      FlashloanPremiumToProtocolUpdatedEvent.OutputObject
    >;
    FlashloanPremiumToProtocolUpdated: TypedContractEvent<
      FlashloanPremiumToProtocolUpdatedEvent.InputTuple,
      FlashloanPremiumToProtocolUpdatedEvent.OutputTuple,
      FlashloanPremiumToProtocolUpdatedEvent.OutputObject
    >;

    "FlashloanPremiumTotalUpdated(uint128,uint128)": TypedContractEvent<
      FlashloanPremiumTotalUpdatedEvent.InputTuple,
      FlashloanPremiumTotalUpdatedEvent.OutputTuple,
      FlashloanPremiumTotalUpdatedEvent.OutputObject
    >;
    FlashloanPremiumTotalUpdated: TypedContractEvent<
      FlashloanPremiumTotalUpdatedEvent.InputTuple,
      FlashloanPremiumTotalUpdatedEvent.OutputTuple,
      FlashloanPremiumTotalUpdatedEvent.OutputObject
    >;

    "LiquidationProtocolFeeChanged(address,uint256,uint256)": TypedContractEvent<
      LiquidationProtocolFeeChangedEvent.InputTuple,
      LiquidationProtocolFeeChangedEvent.OutputTuple,
      LiquidationProtocolFeeChangedEvent.OutputObject
    >;
    LiquidationProtocolFeeChanged: TypedContractEvent<
      LiquidationProtocolFeeChangedEvent.InputTuple,
      LiquidationProtocolFeeChangedEvent.OutputTuple,
      LiquidationProtocolFeeChangedEvent.OutputObject
    >;

    "ReserveActive(address,bool)": TypedContractEvent<
      ReserveActiveEvent.InputTuple,
      ReserveActiveEvent.OutputTuple,
      ReserveActiveEvent.OutputObject
    >;
    ReserveActive: TypedContractEvent<
      ReserveActiveEvent.InputTuple,
      ReserveActiveEvent.OutputTuple,
      ReserveActiveEvent.OutputObject
    >;

    "ReserveBorrowing(address,bool)": TypedContractEvent<
      ReserveBorrowingEvent.InputTuple,
      ReserveBorrowingEvent.OutputTuple,
      ReserveBorrowingEvent.OutputObject
    >;
    ReserveBorrowing: TypedContractEvent<
      ReserveBorrowingEvent.InputTuple,
      ReserveBorrowingEvent.OutputTuple,
      ReserveBorrowingEvent.OutputObject
    >;

    "ReserveDropped(address)": TypedContractEvent<
      ReserveDroppedEvent.InputTuple,
      ReserveDroppedEvent.OutputTuple,
      ReserveDroppedEvent.OutputObject
    >;
    ReserveDropped: TypedContractEvent<
      ReserveDroppedEvent.InputTuple,
      ReserveDroppedEvent.OutputTuple,
      ReserveDroppedEvent.OutputObject
    >;

    "ReserveFactorChanged(address,uint256,uint256)": TypedContractEvent<
      ReserveFactorChangedEvent.InputTuple,
      ReserveFactorChangedEvent.OutputTuple,
      ReserveFactorChangedEvent.OutputObject
    >;
    ReserveFactorChanged: TypedContractEvent<
      ReserveFactorChangedEvent.InputTuple,
      ReserveFactorChangedEvent.OutputTuple,
      ReserveFactorChangedEvent.OutputObject
    >;

    "ReserveFlashLoaning(address,bool)": TypedContractEvent<
      ReserveFlashLoaningEvent.InputTuple,
      ReserveFlashLoaningEvent.OutputTuple,
      ReserveFlashLoaningEvent.OutputObject
    >;
    ReserveFlashLoaning: TypedContractEvent<
      ReserveFlashLoaningEvent.InputTuple,
      ReserveFlashLoaningEvent.OutputTuple,
      ReserveFlashLoaningEvent.OutputObject
    >;

    "ReserveFrozen(address,bool)": TypedContractEvent<
      ReserveFrozenEvent.InputTuple,
      ReserveFrozenEvent.OutputTuple,
      ReserveFrozenEvent.OutputObject
    >;
    ReserveFrozen: TypedContractEvent<
      ReserveFrozenEvent.InputTuple,
      ReserveFrozenEvent.OutputTuple,
      ReserveFrozenEvent.OutputObject
    >;

    "ReserveInitialized(address,address,address,address,address)": TypedContractEvent<
      ReserveInitializedEvent.InputTuple,
      ReserveInitializedEvent.OutputTuple,
      ReserveInitializedEvent.OutputObject
    >;
    ReserveInitialized: TypedContractEvent<
      ReserveInitializedEvent.InputTuple,
      ReserveInitializedEvent.OutputTuple,
      ReserveInitializedEvent.OutputObject
    >;

    "ReserveInterestRateStrategyChanged(address,address,address)": TypedContractEvent<
      ReserveInterestRateStrategyChangedEvent.InputTuple,
      ReserveInterestRateStrategyChangedEvent.OutputTuple,
      ReserveInterestRateStrategyChangedEvent.OutputObject
    >;
    ReserveInterestRateStrategyChanged: TypedContractEvent<
      ReserveInterestRateStrategyChangedEvent.InputTuple,
      ReserveInterestRateStrategyChangedEvent.OutputTuple,
      ReserveInterestRateStrategyChangedEvent.OutputObject
    >;

    "ReservePaused(address,bool)": TypedContractEvent<
      ReservePausedEvent.InputTuple,
      ReservePausedEvent.OutputTuple,
      ReservePausedEvent.OutputObject
    >;
    ReservePaused: TypedContractEvent<
      ReservePausedEvent.InputTuple,
      ReservePausedEvent.OutputTuple,
      ReservePausedEvent.OutputObject
    >;

    "ReserveStableRateBorrowing(address,bool)": TypedContractEvent<
      ReserveStableRateBorrowingEvent.InputTuple,
      ReserveStableRateBorrowingEvent.OutputTuple,
      ReserveStableRateBorrowingEvent.OutputObject
    >;
    ReserveStableRateBorrowing: TypedContractEvent<
      ReserveStableRateBorrowingEvent.InputTuple,
      ReserveStableRateBorrowingEvent.OutputTuple,
      ReserveStableRateBorrowingEvent.OutputObject
    >;

    "SiloedBorrowingChanged(address,bool,bool)": TypedContractEvent<
      SiloedBorrowingChangedEvent.InputTuple,
      SiloedBorrowingChangedEvent.OutputTuple,
      SiloedBorrowingChangedEvent.OutputObject
    >;
    SiloedBorrowingChanged: TypedContractEvent<
      SiloedBorrowingChangedEvent.InputTuple,
      SiloedBorrowingChangedEvent.OutputTuple,
      SiloedBorrowingChangedEvent.OutputObject
    >;

    "StableDebtTokenUpgraded(address,address,address)": TypedContractEvent<
      StableDebtTokenUpgradedEvent.InputTuple,
      StableDebtTokenUpgradedEvent.OutputTuple,
      StableDebtTokenUpgradedEvent.OutputObject
    >;
    StableDebtTokenUpgraded: TypedContractEvent<
      StableDebtTokenUpgradedEvent.InputTuple,
      StableDebtTokenUpgradedEvent.OutputTuple,
      StableDebtTokenUpgradedEvent.OutputObject
    >;

    "SupplyCapChanged(address,uint256,uint256)": TypedContractEvent<
      SupplyCapChangedEvent.InputTuple,
      SupplyCapChangedEvent.OutputTuple,
      SupplyCapChangedEvent.OutputObject
    >;
    SupplyCapChanged: TypedContractEvent<
      SupplyCapChangedEvent.InputTuple,
      SupplyCapChangedEvent.OutputTuple,
      SupplyCapChangedEvent.OutputObject
    >;

    "UnbackedMintCapChanged(address,uint256,uint256)": TypedContractEvent<
      UnbackedMintCapChangedEvent.InputTuple,
      UnbackedMintCapChangedEvent.OutputTuple,
      UnbackedMintCapChangedEvent.OutputObject
    >;
    UnbackedMintCapChanged: TypedContractEvent<
      UnbackedMintCapChangedEvent.InputTuple,
      UnbackedMintCapChangedEvent.OutputTuple,
      UnbackedMintCapChangedEvent.OutputObject
    >;

    "VariableDebtTokenUpgraded(address,address,address)": TypedContractEvent<
      VariableDebtTokenUpgradedEvent.InputTuple,
      VariableDebtTokenUpgradedEvent.OutputTuple,
      VariableDebtTokenUpgradedEvent.OutputObject
    >;
    VariableDebtTokenUpgraded: TypedContractEvent<
      VariableDebtTokenUpgradedEvent.InputTuple,
      VariableDebtTokenUpgradedEvent.OutputTuple,
      VariableDebtTokenUpgradedEvent.OutputObject
    >;
  };
}
