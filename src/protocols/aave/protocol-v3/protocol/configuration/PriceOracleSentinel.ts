/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface PriceOracleSentinelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADDRESSES_PROVIDER"
      | "getGracePeriod"
      | "getSequencerOracle"
      | "isBorrowAllowed"
      | "isLiquidationAllowed"
      | "setGracePeriod"
      | "setSequencerOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "GracePeriodUpdated" | "SequencerOracleUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSequencerOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidationAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSequencerOracle",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSequencerOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidationAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSequencerOracle",
    data: BytesLike
  ): Result;
}

export namespace GracePeriodUpdatedEvent {
  export type InputTuple = [newGracePeriod: BigNumberish];
  export type OutputTuple = [newGracePeriod: bigint];
  export interface OutputObject {
    newGracePeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SequencerOracleUpdatedEvent {
  export type InputTuple = [newSequencerOracle: AddressLike];
  export type OutputTuple = [newSequencerOracle: string];
  export interface OutputObject {
    newSequencerOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PriceOracleSentinel extends BaseContract {
  connect(runner?: ContractRunner | null): PriceOracleSentinel;
  waitForDeployment(): Promise<this>;

  interface: PriceOracleSentinelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADDRESSES_PROVIDER: TypedContractMethod<[], [string], "view">;

  getGracePeriod: TypedContractMethod<[], [bigint], "view">;

  getSequencerOracle: TypedContractMethod<[], [string], "view">;

  isBorrowAllowed: TypedContractMethod<[], [boolean], "view">;

  isLiquidationAllowed: TypedContractMethod<[], [boolean], "view">;

  setGracePeriod: TypedContractMethod<
    [newGracePeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSequencerOracle: TypedContractMethod<
    [newSequencerOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADDRESSES_PROVIDER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGracePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSequencerOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isBorrowAllowed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLiquidationAllowed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setGracePeriod"
  ): TypedContractMethod<[newGracePeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSequencerOracle"
  ): TypedContractMethod<
    [newSequencerOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GracePeriodUpdated"
  ): TypedContractEvent<
    GracePeriodUpdatedEvent.InputTuple,
    GracePeriodUpdatedEvent.OutputTuple,
    GracePeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SequencerOracleUpdated"
  ): TypedContractEvent<
    SequencerOracleUpdatedEvent.InputTuple,
    SequencerOracleUpdatedEvent.OutputTuple,
    SequencerOracleUpdatedEvent.OutputObject
  >;

  filters: {
    "GracePeriodUpdated(uint256)": TypedContractEvent<
      GracePeriodUpdatedEvent.InputTuple,
      GracePeriodUpdatedEvent.OutputTuple,
      GracePeriodUpdatedEvent.OutputObject
    >;
    GracePeriodUpdated: TypedContractEvent<
      GracePeriodUpdatedEvent.InputTuple,
      GracePeriodUpdatedEvent.OutputTuple,
      GracePeriodUpdatedEvent.OutputObject
    >;

    "SequencerOracleUpdated(address)": TypedContractEvent<
      SequencerOracleUpdatedEvent.InputTuple,
      SequencerOracleUpdatedEvent.OutputTuple,
      SequencerOracleUpdatedEvent.OutputObject
    >;
    SequencerOracleUpdated: TypedContractEvent<
      SequencerOracleUpdatedEvent.InputTuple,
      SequencerOracleUpdatedEvent.OutputTuple,
      SequencerOracleUpdatedEvent.OutputObject
    >;
  };
}
