/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace Types {
  export type MarketPauseStatusStruct = {
    isSupplyPaused: boolean;
    isBorrowPaused: boolean;
    isWithdrawPaused: boolean;
    isRepayPaused: boolean;
    isLiquidateCollateralPaused: boolean;
    isLiquidateBorrowPaused: boolean;
    isDeprecated: boolean;
  };

  export type MarketPauseStatusStructOutput = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    isSupplyPaused: boolean;
    isBorrowPaused: boolean;
    isWithdrawPaused: boolean;
    isRepayPaused: boolean;
    isLiquidateCollateralPaused: boolean;
    isLiquidateBorrowPaused: boolean;
    isDeprecated: boolean;
  };

  export type AssetLiquidityDataStruct = {
    collateralValue: BigNumberish;
    maxDebtValue: BigNumberish;
    debtValue: BigNumberish;
    underlyingPrice: BigNumberish;
    collateralFactor: BigNumberish;
  };

  export type AssetLiquidityDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    collateralValue: BigNumber;
    maxDebtValue: BigNumber;
    debtValue: BigNumber;
    underlyingPrice: BigNumber;
    collateralFactor: BigNumber;
  };
}

export interface MorphoCompoundLensInterface extends utils.Interface {
  functions: {
    "MAX_BASIS_POINTS()": FunctionFragment;
    "WAD()": FunctionFragment;
    "comptroller()": FunctionFragment;
    "computeLiquidationRepayAmount(address,address,address,address[])": FunctionFragment;
    "getAccruedBorrowerComp(address,address,uint256)": FunctionFragment;
    "getAccruedSupplierComp(address,address,uint256)": FunctionFragment;
    "getAdvancedMarketData(address)": FunctionFragment;
    "getAllMarkets()": FunctionFragment;
    "getAverageBorrowRatePerBlock(address)": FunctionFragment;
    "getAverageSupplyRatePerBlock(address)": FunctionFragment;
    "getCurrentBorrowBalanceInOf(address,address)": FunctionFragment;
    "getCurrentCompBorrowIndex(address)": FunctionFragment;
    "getCurrentCompSupplyIndex(address)": FunctionFragment;
    "getCurrentP2PBorrowIndex(address)": FunctionFragment;
    "getCurrentP2PSupplyIndex(address)": FunctionFragment;
    "getCurrentPoolIndexes(address)": FunctionFragment;
    "getCurrentSupplyBalanceInOf(address,address)": FunctionFragment;
    "getCurrentUserBorrowRatePerBlock(address,address)": FunctionFragment;
    "getCurrentUserSupplyRatePerBlock(address,address)": FunctionFragment;
    "getEnteredMarkets(address)": FunctionFragment;
    "getIndexes(address,bool)": FunctionFragment;
    "getMainMarketData(address)": FunctionFragment;
    "getMarketConfiguration(address)": FunctionFragment;
    "getMarketPauseStatus(address)": FunctionFragment;
    "getNextUserBorrowRatePerBlock(address,address,uint256)": FunctionFragment;
    "getNextUserSupplyRatePerBlock(address,address,uint256)": FunctionFragment;
    "getRatesPerBlock(address)": FunctionFragment;
    "getTotalBorrow()": FunctionFragment;
    "getTotalMarketBorrow(address)": FunctionFragment;
    "getTotalMarketSupply(address)": FunctionFragment;
    "getTotalSupply()": FunctionFragment;
    "getUserBalanceStates(address,address[])": FunctionFragment;
    "getUserHealthFactor(address,address[])": FunctionFragment;
    "getUserHypotheticalBalanceStates(address,address,uint256,uint256)": FunctionFragment;
    "getUserLiquidityDataForAsset(address,address,bool,address)": FunctionFragment;
    "getUserMaxCapacitiesForAsset(address,address)": FunctionFragment;
    "getUserUnclaimedRewards(address[],address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isLiquidatable(address,address,address[])": FunctionFragment;
    "isLiquidatable(address,address[])": FunctionFragment;
    "morpho()": FunctionFragment;
    "rewardsManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_BASIS_POINTS"
      | "WAD"
      | "comptroller"
      | "computeLiquidationRepayAmount"
      | "getAccruedBorrowerComp"
      | "getAccruedSupplierComp"
      | "getAdvancedMarketData"
      | "getAllMarkets"
      | "getAverageBorrowRatePerBlock"
      | "getAverageSupplyRatePerBlock"
      | "getCurrentBorrowBalanceInOf"
      | "getCurrentCompBorrowIndex"
      | "getCurrentCompSupplyIndex"
      | "getCurrentP2PBorrowIndex"
      | "getCurrentP2PSupplyIndex"
      | "getCurrentPoolIndexes"
      | "getCurrentSupplyBalanceInOf"
      | "getCurrentUserBorrowRatePerBlock"
      | "getCurrentUserSupplyRatePerBlock"
      | "getEnteredMarkets"
      | "getIndexes"
      | "getMainMarketData"
      | "getMarketConfiguration"
      | "getMarketPauseStatus"
      | "getNextUserBorrowRatePerBlock"
      | "getNextUserSupplyRatePerBlock"
      | "getRatesPerBlock"
      | "getTotalBorrow"
      | "getTotalMarketBorrow"
      | "getTotalMarketSupply"
      | "getTotalSupply"
      | "getUserBalanceStates"
      | "getUserHealthFactor"
      | "getUserHypotheticalBalanceStates"
      | "getUserLiquidityDataForAsset"
      | "getUserMaxCapacitiesForAsset"
      | "getUserUnclaimedRewards"
      | "initialize"
      | "isLiquidatable(address,address,address[])"
      | "isLiquidatable(address,address[])"
      | "morpho"
      | "rewardsManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WAD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidationRepayAmount",
    values: [string, string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedBorrowerComp",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedSupplierComp",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdvancedMarketData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageBorrowRatePerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageSupplyRatePerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBorrowBalanceInOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCompBorrowIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCompSupplyIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentP2PBorrowIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentP2PSupplyIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPoolIndexes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSupplyBalanceInOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserBorrowRatePerBlock",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserSupplyRatePerBlock",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnteredMarkets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexes",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainMarketData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketConfiguration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPauseStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUserBorrowRatePerBlock",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUserSupplyRatePerBlock",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRatesPerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMarketBorrow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMarketSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalanceStates",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHealthFactor",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHypotheticalBalanceStates",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLiquidityDataForAsset",
    values: [string, string, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMaxCapacitiesForAsset",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnclaimedRewards",
    values: [string[], string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable(address,address,address[])",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable(address,address[])",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "morpho", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WAD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidationRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedBorrowerComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedSupplierComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdvancedMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageBorrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageSupplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBorrowBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCompBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCompSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentP2PBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentP2PSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPoolIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSupplyBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserBorrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserSupplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnteredMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMainMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextUserBorrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextUserSupplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRatesPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMarketBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMarketSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalanceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHypotheticalBalanceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLiquidityDataForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMaxCapacitiesForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable(address,address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "morpho", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsManager",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MorphoCompoundLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MorphoCompoundLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    WAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptroller(overrides?: CallOverrides): Promise<[string]>;

    computeLiquidationRepayAmount(
      _user: string,
      _poolTokenBorrowedAddress: string,
      _poolTokenCollateralAddress: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { toRepay: BigNumber }>;

    getAccruedBorrowerComp(
      _borrower: string,
      _poolTokenAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccruedSupplierComp(
      _supplier: string,
      _poolTokenAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAdvancedMarketData(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        p2pSupplyIndex: BigNumber;
        p2pBorrowIndex: BigNumber;
        poolSupplyIndex: BigNumber;
        poolBorrowIndex: BigNumber;
        lastUpdateBlockNumber: number;
        p2pSupplyDelta: BigNumber;
        p2pBorrowDelta: BigNumber;
      }
    >;

    getAllMarkets(
      overrides?: CallOverrides
    ): Promise<[string[]] & { marketsCreated: string[] }>;

    getAverageBorrowRatePerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        avgBorrowRatePerBlock: BigNumber;
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getAverageSupplyRatePerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        avgSupplyRatePerBlock: BigNumber;
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
      }
    >;

    getCurrentBorrowBalanceInOf(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balanceOnPool: BigNumber;
        balanceInP2P: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getCurrentCompBorrowIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentCompSupplyIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentP2PBorrowIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentP2PBorrowIndex: BigNumber }>;

    getCurrentP2PSupplyIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currentP2PSupplyIndex: BigNumber }>;

    getCurrentPoolIndexes(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentPoolSupplyIndex: BigNumber;
        currentPoolBorrowIndex: BigNumber;
      }
    >;

    getCurrentSupplyBalanceInOf(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balanceOnPool: BigNumber;
        balanceInP2P: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getCurrentUserBorrowRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentUserSupplyRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEnteredMarkets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { enteredMarkets: string[] }>;

    getIndexes(
      _poolTokenAddress: string,
      _getUpdatedIndexes: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        newP2PSupplyIndex: BigNumber;
        newP2PBorrowIndex: BigNumber;
        newPoolSupplyIndex: BigNumber;
        newPoolBorrowIndex: BigNumber;
      }
    >;

    getMainMarketData(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        avgSupplyRatePerBlock: BigNumber;
        avgBorrowRatePerBlock: BigNumber;
        p2pSupplyAmount: BigNumber;
        p2pBorrowAmount: BigNumber;
        poolSupplyAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getMarketConfiguration(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        number,
        number,
        BigNumber
      ] & {
        underlying: string;
        isCreated: boolean;
        p2pDisabled: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        reserveFactor: number;
        p2pIndexCursor: number;
        collateralFactor: BigNumber;
      }
    >;

    getMarketPauseStatus(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[Types.MarketPauseStatusStructOutput]>;

    getNextUserBorrowRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nextBorrowRatePerBlock: BigNumber;
        balanceOnPool: BigNumber;
        balanceInP2P: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getNextUserSupplyRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nextSupplyRatePerBlock: BigNumber;
        balanceOnPool: BigNumber;
        balanceInP2P: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getRatesPerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        p2pSupplyRate: BigNumber;
        p2pBorrowRate: BigNumber;
        poolSupplyRate: BigNumber;
        poolBorrowRate: BigNumber;
      }
    >;

    getTotalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
        totalBorrowAmount: BigNumber;
      }
    >;

    getTotalMarketBorrow(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getTotalMarketSupply(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
      }
    >;

    getTotalSupply(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
        totalSupplyAmount: BigNumber;
      }
    >;

    getUserBalanceStates(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        collateralValue: BigNumber;
        debtValue: BigNumber;
        maxDebtValue: BigNumber;
      }
    >;

    getUserHealthFactor(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserHypotheticalBalanceStates(
      _user: string,
      _poolTokenAddress: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debtValue: BigNumber; maxDebtValue: BigNumber }
    >;

    getUserLiquidityDataForAsset(
      _user: string,
      _poolTokenAddress: string,
      _getUpdatedIndexes: boolean,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<
      [Types.AssetLiquidityDataStructOutput] & {
        assetData: Types.AssetLiquidityDataStructOutput;
      }
    >;

    getUserMaxCapacitiesForAsset(
      _user: string,
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawable: BigNumber;
        borrowable: BigNumber;
      }
    >;

    getUserUnclaimedRewards(
      _poolTokenAddresses: string[],
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unclaimedRewards: BigNumber }>;

    initialize(
      _morphoAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "isLiquidatable(address,address,address[])"(
      _user: string,
      _poolToken: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLiquidatable(address,address[])"(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    morpho(overrides?: CallOverrides): Promise<[string]>;

    rewardsManager(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  WAD(overrides?: CallOverrides): Promise<BigNumber>;

  comptroller(overrides?: CallOverrides): Promise<string>;

  computeLiquidationRepayAmount(
    _user: string,
    _poolTokenBorrowedAddress: string,
    _poolTokenCollateralAddress: string,
    _updatedMarkets: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccruedBorrowerComp(
    _borrower: string,
    _poolTokenAddress: string,
    _balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccruedSupplierComp(
    _supplier: string,
    _poolTokenAddress: string,
    _balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAdvancedMarketData(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber
    ] & {
      p2pSupplyIndex: BigNumber;
      p2pBorrowIndex: BigNumber;
      poolSupplyIndex: BigNumber;
      poolBorrowIndex: BigNumber;
      lastUpdateBlockNumber: number;
      p2pSupplyDelta: BigNumber;
      p2pBorrowDelta: BigNumber;
    }
  >;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAverageBorrowRatePerBlock(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      avgBorrowRatePerBlock: BigNumber;
      p2pBorrowAmount: BigNumber;
      poolBorrowAmount: BigNumber;
    }
  >;

  getAverageSupplyRatePerBlock(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      avgSupplyRatePerBlock: BigNumber;
      p2pSupplyAmount: BigNumber;
      poolSupplyAmount: BigNumber;
    }
  >;

  getCurrentBorrowBalanceInOf(
    _poolTokenAddress: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balanceOnPool: BigNumber;
      balanceInP2P: BigNumber;
      totalBalance: BigNumber;
    }
  >;

  getCurrentCompBorrowIndex(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentCompSupplyIndex(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentP2PBorrowIndex(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentP2PSupplyIndex(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPoolIndexes(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentPoolSupplyIndex: BigNumber;
      currentPoolBorrowIndex: BigNumber;
    }
  >;

  getCurrentSupplyBalanceInOf(
    _poolTokenAddress: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balanceOnPool: BigNumber;
      balanceInP2P: BigNumber;
      totalBalance: BigNumber;
    }
  >;

  getCurrentUserBorrowRatePerBlock(
    _poolTokenAddress: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentUserSupplyRatePerBlock(
    _poolTokenAddress: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEnteredMarkets(
    _user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getIndexes(
    _poolTokenAddress: string,
    _getUpdatedIndexes: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      newP2PSupplyIndex: BigNumber;
      newP2PBorrowIndex: BigNumber;
      newPoolSupplyIndex: BigNumber;
      newPoolBorrowIndex: BigNumber;
    }
  >;

  getMainMarketData(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      avgSupplyRatePerBlock: BigNumber;
      avgBorrowRatePerBlock: BigNumber;
      p2pSupplyAmount: BigNumber;
      p2pBorrowAmount: BigNumber;
      poolSupplyAmount: BigNumber;
      poolBorrowAmount: BigNumber;
    }
  >;

  getMarketConfiguration(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, boolean, boolean, boolean, number, number, BigNumber] & {
      underlying: string;
      isCreated: boolean;
      p2pDisabled: boolean;
      isPaused: boolean;
      isPartiallyPaused: boolean;
      reserveFactor: number;
      p2pIndexCursor: number;
      collateralFactor: BigNumber;
    }
  >;

  getMarketPauseStatus(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<Types.MarketPauseStatusStructOutput>;

  getNextUserBorrowRatePerBlock(
    _poolTokenAddress: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      nextBorrowRatePerBlock: BigNumber;
      balanceOnPool: BigNumber;
      balanceInP2P: BigNumber;
      totalBalance: BigNumber;
    }
  >;

  getNextUserSupplyRatePerBlock(
    _poolTokenAddress: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      nextSupplyRatePerBlock: BigNumber;
      balanceOnPool: BigNumber;
      balanceInP2P: BigNumber;
      totalBalance: BigNumber;
    }
  >;

  getRatesPerBlock(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      p2pSupplyRate: BigNumber;
      p2pBorrowRate: BigNumber;
      poolSupplyRate: BigNumber;
      poolBorrowRate: BigNumber;
    }
  >;

  getTotalBorrow(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      p2pBorrowAmount: BigNumber;
      poolBorrowAmount: BigNumber;
      totalBorrowAmount: BigNumber;
    }
  >;

  getTotalMarketBorrow(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      p2pBorrowAmount: BigNumber;
      poolBorrowAmount: BigNumber;
    }
  >;

  getTotalMarketSupply(
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      p2pSupplyAmount: BigNumber;
      poolSupplyAmount: BigNumber;
    }
  >;

  getTotalSupply(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      p2pSupplyAmount: BigNumber;
      poolSupplyAmount: BigNumber;
      totalSupplyAmount: BigNumber;
    }
  >;

  getUserBalanceStates(
    _user: string,
    _updatedMarkets: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      collateralValue: BigNumber;
      debtValue: BigNumber;
      maxDebtValue: BigNumber;
    }
  >;

  getUserHealthFactor(
    _user: string,
    _updatedMarkets: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserHypotheticalBalanceStates(
    _user: string,
    _poolTokenAddress: string,
    _withdrawnAmount: BigNumberish,
    _borrowedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { debtValue: BigNumber; maxDebtValue: BigNumber }
  >;

  getUserLiquidityDataForAsset(
    _user: string,
    _poolTokenAddress: string,
    _getUpdatedIndexes: boolean,
    _oracle: string,
    overrides?: CallOverrides
  ): Promise<Types.AssetLiquidityDataStructOutput>;

  getUserMaxCapacitiesForAsset(
    _user: string,
    _poolTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { withdrawable: BigNumber; borrowable: BigNumber }
  >;

  getUserUnclaimedRewards(
    _poolTokenAddresses: string[],
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _morphoAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "isLiquidatable(address,address,address[])"(
    _user: string,
    _poolToken: string,
    _updatedMarkets: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isLiquidatable(address,address[])"(
    _user: string,
    _updatedMarkets: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  morpho(overrides?: CallOverrides): Promise<string>;

  rewardsManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    WAD(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<string>;

    computeLiquidationRepayAmount(
      _user: string,
      _poolTokenBorrowedAddress: string,
      _poolTokenCollateralAddress: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccruedBorrowerComp(
      _borrower: string,
      _poolTokenAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccruedSupplierComp(
      _supplier: string,
      _poolTokenAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdvancedMarketData(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber
      ] & {
        p2pSupplyIndex: BigNumber;
        p2pBorrowIndex: BigNumber;
        poolSupplyIndex: BigNumber;
        poolBorrowIndex: BigNumber;
        lastUpdateBlockNumber: number;
        p2pSupplyDelta: BigNumber;
        p2pBorrowDelta: BigNumber;
      }
    >;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAverageBorrowRatePerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        avgBorrowRatePerBlock: BigNumber;
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getAverageSupplyRatePerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        avgSupplyRatePerBlock: BigNumber;
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
      }
    >;

    getCurrentBorrowBalanceInOf(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balanceOnPool: BigNumber;
        balanceInP2P: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getCurrentCompBorrowIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentCompSupplyIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentP2PBorrowIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentP2PSupplyIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPoolIndexes(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentPoolSupplyIndex: BigNumber;
        currentPoolBorrowIndex: BigNumber;
      }
    >;

    getCurrentSupplyBalanceInOf(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balanceOnPool: BigNumber;
        balanceInP2P: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getCurrentUserBorrowRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUserSupplyRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnteredMarkets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getIndexes(
      _poolTokenAddress: string,
      _getUpdatedIndexes: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        newP2PSupplyIndex: BigNumber;
        newP2PBorrowIndex: BigNumber;
        newPoolSupplyIndex: BigNumber;
        newPoolBorrowIndex: BigNumber;
      }
    >;

    getMainMarketData(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        avgSupplyRatePerBlock: BigNumber;
        avgBorrowRatePerBlock: BigNumber;
        p2pSupplyAmount: BigNumber;
        p2pBorrowAmount: BigNumber;
        poolSupplyAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getMarketConfiguration(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        number,
        number,
        BigNumber
      ] & {
        underlying: string;
        isCreated: boolean;
        p2pDisabled: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        reserveFactor: number;
        p2pIndexCursor: number;
        collateralFactor: BigNumber;
      }
    >;

    getMarketPauseStatus(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<Types.MarketPauseStatusStructOutput>;

    getNextUserBorrowRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nextBorrowRatePerBlock: BigNumber;
        balanceOnPool: BigNumber;
        balanceInP2P: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getNextUserSupplyRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nextSupplyRatePerBlock: BigNumber;
        balanceOnPool: BigNumber;
        balanceInP2P: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getRatesPerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        p2pSupplyRate: BigNumber;
        p2pBorrowRate: BigNumber;
        poolSupplyRate: BigNumber;
        poolBorrowRate: BigNumber;
      }
    >;

    getTotalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
        totalBorrowAmount: BigNumber;
      }
    >;

    getTotalMarketBorrow(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getTotalMarketSupply(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
      }
    >;

    getTotalSupply(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
        totalSupplyAmount: BigNumber;
      }
    >;

    getUserBalanceStates(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        collateralValue: BigNumber;
        debtValue: BigNumber;
        maxDebtValue: BigNumber;
      }
    >;

    getUserHealthFactor(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHypotheticalBalanceStates(
      _user: string,
      _poolTokenAddress: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debtValue: BigNumber; maxDebtValue: BigNumber }
    >;

    getUserLiquidityDataForAsset(
      _user: string,
      _poolTokenAddress: string,
      _getUpdatedIndexes: boolean,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<Types.AssetLiquidityDataStructOutput>;

    getUserMaxCapacitiesForAsset(
      _user: string,
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawable: BigNumber;
        borrowable: BigNumber;
      }
    >;

    getUserUnclaimedRewards(
      _poolTokenAddresses: string[],
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _morphoAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "isLiquidatable(address,address,address[])"(
      _user: string,
      _poolToken: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLiquidatable(address,address[])"(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    morpho(overrides?: CallOverrides): Promise<string>;

    rewardsManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    WAD(overrides?: CallOverrides): Promise<BigNumber>;

    comptroller(overrides?: CallOverrides): Promise<BigNumber>;

    computeLiquidationRepayAmount(
      _user: string,
      _poolTokenBorrowedAddress: string,
      _poolTokenCollateralAddress: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccruedBorrowerComp(
      _borrower: string,
      _poolTokenAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccruedSupplierComp(
      _supplier: string,
      _poolTokenAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdvancedMarketData(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAverageBorrowRatePerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAverageSupplyRatePerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentBorrowBalanceInOf(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentCompBorrowIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentCompSupplyIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentP2PBorrowIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentP2PSupplyIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPoolIndexes(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentSupplyBalanceInOf(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUserBorrowRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUserSupplyRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnteredMarkets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexes(
      _poolTokenAddress: string,
      _getUpdatedIndexes: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainMarketData(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketConfiguration(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPauseStatus(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextUserBorrowRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextUserSupplyRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatesPerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalMarketBorrow(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalMarketSupply(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalanceStates(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHealthFactor(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHypotheticalBalanceStates(
      _user: string,
      _poolTokenAddress: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLiquidityDataForAsset(
      _user: string,
      _poolTokenAddress: string,
      _getUpdatedIndexes: boolean,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMaxCapacitiesForAsset(
      _user: string,
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserUnclaimedRewards(
      _poolTokenAddresses: string[],
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _morphoAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "isLiquidatable(address,address,address[])"(
      _user: string,
      _poolToken: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLiquidatable(address,address[])"(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    morpho(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WAD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeLiquidationRepayAmount(
      _user: string,
      _poolTokenBorrowedAddress: string,
      _poolTokenCollateralAddress: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccruedBorrowerComp(
      _borrower: string,
      _poolTokenAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccruedSupplierComp(
      _supplier: string,
      _poolTokenAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdvancedMarketData(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAverageBorrowRatePerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAverageSupplyRatePerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBorrowBalanceInOf(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentCompBorrowIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentCompSupplyIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentP2PBorrowIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentP2PSupplyIndex(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPoolIndexes(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentSupplyBalanceInOf(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentUserBorrowRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentUserSupplyRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnteredMarkets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexes(
      _poolTokenAddress: string,
      _getUpdatedIndexes: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainMarketData(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketConfiguration(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketPauseStatus(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextUserBorrowRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextUserSupplyRatePerBlock(
      _poolTokenAddress: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRatesPerBlock(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalMarketBorrow(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalMarketSupply(
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserBalanceStates(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserHealthFactor(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserHypotheticalBalanceStates(
      _user: string,
      _poolTokenAddress: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLiquidityDataForAsset(
      _user: string,
      _poolTokenAddress: string,
      _getUpdatedIndexes: boolean,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserMaxCapacitiesForAsset(
      _user: string,
      _poolTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserUnclaimedRewards(
      _poolTokenAddresses: string[],
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _morphoAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "isLiquidatable(address,address,address[])"(
      _user: string,
      _poolToken: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLiquidatable(address,address[])"(
      _user: string,
      _updatedMarkets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    morpho(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
