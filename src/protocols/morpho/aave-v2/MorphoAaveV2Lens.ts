/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace Types {
  export type IndexesStruct = {
    p2pSupplyIndex: BigNumberish;
    p2pBorrowIndex: BigNumberish;
    poolSupplyIndex: BigNumberish;
    poolBorrowIndex: BigNumberish;
  };

  export type IndexesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    p2pSupplyIndex: BigNumber;
    p2pBorrowIndex: BigNumber;
    poolSupplyIndex: BigNumber;
    poolBorrowIndex: BigNumber;
  };

  export type MarketPauseStatusStruct = {
    isSupplyPaused: boolean;
    isBorrowPaused: boolean;
    isWithdrawPaused: boolean;
    isRepayPaused: boolean;
    isLiquidateCollateralPaused: boolean;
    isLiquidateBorrowPaused: boolean;
    isDeprecated: boolean;
  };

  export type MarketPauseStatusStructOutput = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    boolean
  ] & {
    isSupplyPaused: boolean;
    isBorrowPaused: boolean;
    isWithdrawPaused: boolean;
    isRepayPaused: boolean;
    isLiquidateCollateralPaused: boolean;
    isLiquidateBorrowPaused: boolean;
    isDeprecated: boolean;
  };

  export type LiquidityDataStruct = {
    collateralEth: BigNumberish;
    borrowableEth: BigNumberish;
    maxDebtEth: BigNumberish;
    debtEth: BigNumberish;
  };

  export type LiquidityDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    collateralEth: BigNumber;
    borrowableEth: BigNumber;
    maxDebtEth: BigNumber;
    debtEth: BigNumber;
  };

  export type AssetLiquidityDataStruct = {
    decimals: BigNumberish;
    tokenUnit: BigNumberish;
    liquidationThreshold: BigNumberish;
    ltv: BigNumberish;
    underlyingPrice: BigNumberish;
    collateralEth: BigNumberish;
    debtEth: BigNumberish;
  };

  export type AssetLiquidityDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    decimals: BigNumber;
    tokenUnit: BigNumber;
    liquidationThreshold: BigNumber;
    ltv: BigNumber;
    underlyingPrice: BigNumber;
    collateralEth: BigNumber;
    debtEth: BigNumber;
  };
}

export interface MorphoAaveV2LensInterface extends utils.Interface {
  functions: {
    "DEFAULT_LIQUIDATION_CLOSE_FACTOR()": FunctionFragment;
    "HEALTH_FACTOR_LIQUIDATION_THRESHOLD()": FunctionFragment;
    "ST_ETH()": FunctionFragment;
    "ST_ETH_BASE_REBASE_INDEX()": FunctionFragment;
    "addressesProvider()": FunctionFragment;
    "computeLiquidationRepayAmount(address,address,address)": FunctionFragment;
    "getAdvancedMarketData(address)": FunctionFragment;
    "getAllMarkets()": FunctionFragment;
    "getAverageBorrowRatePerYear(address)": FunctionFragment;
    "getAverageSupplyRatePerYear(address)": FunctionFragment;
    "getCurrentBorrowBalanceInOf(address,address)": FunctionFragment;
    "getCurrentP2PBorrowIndex(address)": FunctionFragment;
    "getCurrentP2PSupplyIndex(address)": FunctionFragment;
    "getCurrentSupplyBalanceInOf(address,address)": FunctionFragment;
    "getCurrentUserBorrowRatePerYear(address,address)": FunctionFragment;
    "getCurrentUserSupplyRatePerYear(address,address)": FunctionFragment;
    "getEnteredMarkets(address)": FunctionFragment;
    "getIndexes(address)": FunctionFragment;
    "getMainMarketData(address)": FunctionFragment;
    "getMarketConfiguration(address)": FunctionFragment;
    "getMarketPauseStatus(address)": FunctionFragment;
    "getNextUserBorrowRatePerYear(address,address,uint256)": FunctionFragment;
    "getNextUserSupplyRatePerYear(address,address,uint256)": FunctionFragment;
    "getRatesPerYear(address)": FunctionFragment;
    "getTotalBorrow()": FunctionFragment;
    "getTotalMarketBorrow(address)": FunctionFragment;
    "getTotalMarketSupply(address)": FunctionFragment;
    "getTotalSupply()": FunctionFragment;
    "getUserBalanceStates(address)": FunctionFragment;
    "getUserHealthFactor(address)": FunctionFragment;
    "getUserHypotheticalBalanceStates(address,address,uint256,uint256)": FunctionFragment;
    "getUserHypotheticalHealthFactor(address,address,uint256,uint256)": FunctionFragment;
    "getUserLiquidityDataForAsset(address,address,address)": FunctionFragment;
    "getUserMaxCapacitiesForAsset(address,address)": FunctionFragment;
    "isLiquidatable(address)": FunctionFragment;
    "isLiquidatable(address,address)": FunctionFragment;
    "isMarketCreated(address)": FunctionFragment;
    "isMarketCreatedAndNotPaused(address)": FunctionFragment;
    "isMarketCreatedAndNotPausedNorPartiallyPaused(address)": FunctionFragment;
    "morpho()": FunctionFragment;
    "pool()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_LIQUIDATION_CLOSE_FACTOR"
      | "HEALTH_FACTOR_LIQUIDATION_THRESHOLD"
      | "ST_ETH"
      | "ST_ETH_BASE_REBASE_INDEX"
      | "addressesProvider"
      | "computeLiquidationRepayAmount"
      | "getAdvancedMarketData"
      | "getAllMarkets"
      | "getAverageBorrowRatePerYear"
      | "getAverageSupplyRatePerYear"
      | "getCurrentBorrowBalanceInOf"
      | "getCurrentP2PBorrowIndex"
      | "getCurrentP2PSupplyIndex"
      | "getCurrentSupplyBalanceInOf"
      | "getCurrentUserBorrowRatePerYear"
      | "getCurrentUserSupplyRatePerYear"
      | "getEnteredMarkets"
      | "getIndexes"
      | "getMainMarketData"
      | "getMarketConfiguration"
      | "getMarketPauseStatus"
      | "getNextUserBorrowRatePerYear"
      | "getNextUserSupplyRatePerYear"
      | "getRatesPerYear"
      | "getTotalBorrow"
      | "getTotalMarketBorrow"
      | "getTotalMarketSupply"
      | "getTotalSupply"
      | "getUserBalanceStates"
      | "getUserHealthFactor"
      | "getUserHypotheticalBalanceStates"
      | "getUserHypotheticalHealthFactor"
      | "getUserLiquidityDataForAsset"
      | "getUserMaxCapacitiesForAsset"
      | "isLiquidatable(address)"
      | "isLiquidatable(address,address)"
      | "isMarketCreated"
      | "isMarketCreatedAndNotPaused"
      | "isMarketCreatedAndNotPausedNorPartiallyPaused"
      | "morpho"
      | "pool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_LIQUIDATION_CLOSE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ST_ETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ST_ETH_BASE_REBASE_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidationRepayAmount",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdvancedMarketData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageBorrowRatePerYear",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageSupplyRatePerYear",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBorrowBalanceInOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentP2PBorrowIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentP2PSupplyIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSupplyBalanceInOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserBorrowRatePerYear",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserSupplyRatePerYear",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnteredMarkets",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getIndexes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMainMarketData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketConfiguration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketPauseStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUserBorrowRatePerYear",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUserSupplyRatePerYear",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRatesPerYear",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMarketBorrow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMarketSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalanceStates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHealthFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHypotheticalBalanceStates",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHypotheticalHealthFactor",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLiquidityDataForAsset",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMaxCapacitiesForAsset",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable(address,address)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreatedAndNotPaused",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreatedAndNotPausedNorPartiallyPaused",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "morpho", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_LIQUIDATION_CLOSE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ST_ETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ST_ETH_BASE_REBASE_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidationRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdvancedMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageBorrowRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageSupplyRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBorrowBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentP2PBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentP2PSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSupplyBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserBorrowRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserSupplyRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnteredMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMainMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextUserBorrowRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextUserSupplyRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRatesPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMarketBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMarketSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalanceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHypotheticalBalanceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHypotheticalHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLiquidityDataForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMaxCapacitiesForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreatedAndNotPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreatedAndNotPausedNorPartiallyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "morpho", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;

  events: {};
}

export interface MorphoAaveV2Lens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MorphoAaveV2LensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<[number]>;

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ST_ETH(overrides?: CallOverrides): Promise<[string]>;

    ST_ETH_BASE_REBASE_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    addressesProvider(overrides?: CallOverrides): Promise<[string]>;

    computeLiquidationRepayAmount(
      _user: string,
      _poolTokenBorrowed: string,
      _poolTokenCollateral: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAdvancedMarketData(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [Types.IndexesStructOutput, number, BigNumber, BigNumber] & {
        indexes: Types.IndexesStructOutput;
        lastUpdateTimestamp: number;
        p2pSupplyDelta: BigNumber;
        p2pBorrowDelta: BigNumber;
      }
    >;

    getAllMarkets(
      overrides?: CallOverrides
    ): Promise<[string[]] & { marketsCreated: string[] }>;

    getAverageBorrowRatePerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        avgBorrowRatePerYear: BigNumber;
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getAverageSupplyRatePerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        avgSupplyRatePerYear: BigNumber;
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
      }
    >;

    getCurrentBorrowBalanceInOf(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balanceInP2P: BigNumber;
        balanceOnPool: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getCurrentP2PBorrowIndex(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { p2pBorrowIndex: BigNumber }>;

    getCurrentP2PSupplyIndex(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { p2pSupplyIndex: BigNumber }>;

    getCurrentSupplyBalanceInOf(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balanceInP2P: BigNumber;
        balanceOnPool: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getCurrentUserBorrowRatePerYear(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { borrowRatePerYear: BigNumber }>;

    getCurrentUserSupplyRatePerYear(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supplyRatePerYear: BigNumber }>;

    getEnteredMarkets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { enteredMarkets: string[] }>;

    getIndexes(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [Types.IndexesStructOutput] & { indexes: Types.IndexesStructOutput }
    >;

    getMainMarketData(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        avgSupplyRatePerYear: BigNumber;
        avgBorrowRatePerYear: BigNumber;
        p2pSupplyAmount: BigNumber;
        p2pBorrowAmount: BigNumber;
        poolSupplyAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getMarketConfiguration(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        underlying: string;
        isCreated: boolean;
        isP2PDisabled: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        reserveFactor: number;
        p2pIndexCursor: number;
        loanToValue: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
        decimals: BigNumber;
      }
    >;

    getMarketPauseStatus(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[Types.MarketPauseStatusStructOutput]>;

    getNextUserBorrowRatePerYear(
      _poolToken: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nextBorrowRatePerYear: BigNumber;
        balanceInP2P: BigNumber;
        balanceOnPool: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getNextUserSupplyRatePerYear(
      _poolToken: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nextSupplyRatePerYear: BigNumber;
        balanceInP2P: BigNumber;
        balanceOnPool: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getRatesPerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTotalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
        totalBorrowAmount: BigNumber;
      }
    >;

    getTotalMarketBorrow(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getTotalMarketSupply(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
      }
    >;

    getTotalSupply(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
        totalSupplyAmount: BigNumber;
      }
    >;

    getUserBalanceStates(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[Types.LiquidityDataStructOutput]>;

    getUserHealthFactor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserHypotheticalBalanceStates(
      _user: string,
      _poolToken: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [Types.LiquidityDataStructOutput] & {
        liquidityData: Types.LiquidityDataStructOutput;
      }
    >;

    getUserHypotheticalHealthFactor(
      _user: string,
      _poolToken: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { healthFactor: BigNumber }>;

    getUserLiquidityDataForAsset(
      _user: string,
      _poolToken: string,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<[Types.AssetLiquidityDataStructOutput]>;

    getUserMaxCapacitiesForAsset(
      _user: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawable: BigNumber;
        borrowable: BigNumber;
      }
    >;

    "isLiquidatable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isLiquidatable(address,address)"(
      _user: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketCreated(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketCreatedAndNotPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketCreatedAndNotPausedNorPartiallyPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    morpho(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_LIQUIDATION_CLOSE_FACTOR(overrides?: CallOverrides): Promise<number>;

  HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ST_ETH(overrides?: CallOverrides): Promise<string>;

  ST_ETH_BASE_REBASE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  computeLiquidationRepayAmount(
    _user: string,
    _poolTokenBorrowed: string,
    _poolTokenCollateral: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAdvancedMarketData(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [Types.IndexesStructOutput, number, BigNumber, BigNumber] & {
      indexes: Types.IndexesStructOutput;
      lastUpdateTimestamp: number;
      p2pSupplyDelta: BigNumber;
      p2pBorrowDelta: BigNumber;
    }
  >;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAverageBorrowRatePerYear(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      avgBorrowRatePerYear: BigNumber;
      p2pBorrowAmount: BigNumber;
      poolBorrowAmount: BigNumber;
    }
  >;

  getAverageSupplyRatePerYear(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      avgSupplyRatePerYear: BigNumber;
      p2pSupplyAmount: BigNumber;
      poolSupplyAmount: BigNumber;
    }
  >;

  getCurrentBorrowBalanceInOf(
    _poolToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balanceInP2P: BigNumber;
      balanceOnPool: BigNumber;
      totalBalance: BigNumber;
    }
  >;

  getCurrentP2PBorrowIndex(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentP2PSupplyIndex(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentSupplyBalanceInOf(
    _poolToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balanceInP2P: BigNumber;
      balanceOnPool: BigNumber;
      totalBalance: BigNumber;
    }
  >;

  getCurrentUserBorrowRatePerYear(
    _poolToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentUserSupplyRatePerYear(
    _poolToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEnteredMarkets(
    _user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getIndexes(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<Types.IndexesStructOutput>;

  getMainMarketData(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      avgSupplyRatePerYear: BigNumber;
      avgBorrowRatePerYear: BigNumber;
      p2pSupplyAmount: BigNumber;
      p2pBorrowAmount: BigNumber;
      poolSupplyAmount: BigNumber;
      poolBorrowAmount: BigNumber;
    }
  >;

  getMarketConfiguration(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      boolean,
      boolean,
      boolean,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      underlying: string;
      isCreated: boolean;
      isP2PDisabled: boolean;
      isPaused: boolean;
      isPartiallyPaused: boolean;
      reserveFactor: number;
      p2pIndexCursor: number;
      loanToValue: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      decimals: BigNumber;
    }
  >;

  getMarketPauseStatus(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<Types.MarketPauseStatusStructOutput>;

  getNextUserBorrowRatePerYear(
    _poolToken: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      nextBorrowRatePerYear: BigNumber;
      balanceInP2P: BigNumber;
      balanceOnPool: BigNumber;
      totalBalance: BigNumber;
    }
  >;

  getNextUserSupplyRatePerYear(
    _poolToken: string,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      nextSupplyRatePerYear: BigNumber;
      balanceInP2P: BigNumber;
      balanceOnPool: BigNumber;
      totalBalance: BigNumber;
    }
  >;

  getRatesPerYear(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getTotalBorrow(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      p2pBorrowAmount: BigNumber;
      poolBorrowAmount: BigNumber;
      totalBorrowAmount: BigNumber;
    }
  >;

  getTotalMarketBorrow(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      p2pBorrowAmount: BigNumber;
      poolBorrowAmount: BigNumber;
    }
  >;

  getTotalMarketSupply(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      p2pSupplyAmount: BigNumber;
      poolSupplyAmount: BigNumber;
    }
  >;

  getTotalSupply(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      p2pSupplyAmount: BigNumber;
      poolSupplyAmount: BigNumber;
      totalSupplyAmount: BigNumber;
    }
  >;

  getUserBalanceStates(
    _user: string,
    overrides?: CallOverrides
  ): Promise<Types.LiquidityDataStructOutput>;

  getUserHealthFactor(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserHypotheticalBalanceStates(
    _user: string,
    _poolToken: string,
    _withdrawnAmount: BigNumberish,
    _borrowedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Types.LiquidityDataStructOutput>;

  getUserHypotheticalHealthFactor(
    _user: string,
    _poolToken: string,
    _withdrawnAmount: BigNumberish,
    _borrowedAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLiquidityDataForAsset(
    _user: string,
    _poolToken: string,
    _oracle: string,
    overrides?: CallOverrides
  ): Promise<Types.AssetLiquidityDataStructOutput>;

  getUserMaxCapacitiesForAsset(
    _user: string,
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { withdrawable: BigNumber; borrowable: BigNumber }
  >;

  "isLiquidatable(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isLiquidatable(address,address)"(
    _user: string,
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketCreated(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketCreatedAndNotPaused(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketCreatedAndNotPausedNorPartiallyPaused(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  morpho(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<number>;

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ST_ETH(overrides?: CallOverrides): Promise<string>;

    ST_ETH_BASE_REBASE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    computeLiquidationRepayAmount(
      _user: string,
      _poolTokenBorrowed: string,
      _poolTokenCollateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdvancedMarketData(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [Types.IndexesStructOutput, number, BigNumber, BigNumber] & {
        indexes: Types.IndexesStructOutput;
        lastUpdateTimestamp: number;
        p2pSupplyDelta: BigNumber;
        p2pBorrowDelta: BigNumber;
      }
    >;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAverageBorrowRatePerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        avgBorrowRatePerYear: BigNumber;
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getAverageSupplyRatePerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        avgSupplyRatePerYear: BigNumber;
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
      }
    >;

    getCurrentBorrowBalanceInOf(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balanceInP2P: BigNumber;
        balanceOnPool: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getCurrentP2PBorrowIndex(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentP2PSupplyIndex(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentSupplyBalanceInOf(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balanceInP2P: BigNumber;
        balanceOnPool: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getCurrentUserBorrowRatePerYear(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUserSupplyRatePerYear(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnteredMarkets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getIndexes(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<Types.IndexesStructOutput>;

    getMainMarketData(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        avgSupplyRatePerYear: BigNumber;
        avgBorrowRatePerYear: BigNumber;
        p2pSupplyAmount: BigNumber;
        p2pBorrowAmount: BigNumber;
        poolSupplyAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getMarketConfiguration(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        underlying: string;
        isCreated: boolean;
        isP2PDisabled: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        reserveFactor: number;
        p2pIndexCursor: number;
        loanToValue: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
        decimals: BigNumber;
      }
    >;

    getMarketPauseStatus(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<Types.MarketPauseStatusStructOutput>;

    getNextUserBorrowRatePerYear(
      _poolToken: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nextBorrowRatePerYear: BigNumber;
        balanceInP2P: BigNumber;
        balanceOnPool: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getNextUserSupplyRatePerYear(
      _poolToken: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        nextSupplyRatePerYear: BigNumber;
        balanceInP2P: BigNumber;
        balanceOnPool: BigNumber;
        totalBalance: BigNumber;
      }
    >;

    getRatesPerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTotalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
        totalBorrowAmount: BigNumber;
      }
    >;

    getTotalMarketBorrow(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        p2pBorrowAmount: BigNumber;
        poolBorrowAmount: BigNumber;
      }
    >;

    getTotalMarketSupply(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
      }
    >;

    getTotalSupply(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        p2pSupplyAmount: BigNumber;
        poolSupplyAmount: BigNumber;
        totalSupplyAmount: BigNumber;
      }
    >;

    getUserBalanceStates(
      _user: string,
      overrides?: CallOverrides
    ): Promise<Types.LiquidityDataStructOutput>;

    getUserHealthFactor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHypotheticalBalanceStates(
      _user: string,
      _poolToken: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Types.LiquidityDataStructOutput>;

    getUserHypotheticalHealthFactor(
      _user: string,
      _poolToken: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLiquidityDataForAsset(
      _user: string,
      _poolToken: string,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<Types.AssetLiquidityDataStructOutput>;

    getUserMaxCapacitiesForAsset(
      _user: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawable: BigNumber;
        borrowable: BigNumber;
      }
    >;

    "isLiquidatable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLiquidatable(address,address)"(
      _user: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketCreated(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketCreatedAndNotPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketCreatedAndNotPausedNorPartiallyPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    morpho(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    DEFAULT_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ST_ETH(overrides?: CallOverrides): Promise<BigNumber>;

    ST_ETH_BASE_REBASE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    computeLiquidationRepayAmount(
      _user: string,
      _poolTokenBorrowed: string,
      _poolTokenCollateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdvancedMarketData(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAverageBorrowRatePerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAverageSupplyRatePerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentBorrowBalanceInOf(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentP2PBorrowIndex(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentP2PSupplyIndex(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentSupplyBalanceInOf(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUserBorrowRatePerYear(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentUserSupplyRatePerYear(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnteredMarkets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexes(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainMarketData(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketConfiguration(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketPauseStatus(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextUserBorrowRatePerYear(
      _poolToken: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextUserSupplyRatePerYear(
      _poolToken: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRatesPerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalMarketBorrow(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalMarketSupply(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalanceStates(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHealthFactor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHypotheticalBalanceStates(
      _user: string,
      _poolToken: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHypotheticalHealthFactor(
      _user: string,
      _poolToken: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLiquidityDataForAsset(
      _user: string,
      _poolToken: string,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMaxCapacitiesForAsset(
      _user: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLiquidatable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLiquidatable(address,address)"(
      _user: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketCreated(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketCreatedAndNotPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketCreatedAndNotPausedNorPartiallyPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    morpho(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_LIQUIDATION_CLOSE_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ST_ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ST_ETH_BASE_REBASE_INDEX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeLiquidationRepayAmount(
      _user: string,
      _poolTokenBorrowed: string,
      _poolTokenCollateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdvancedMarketData(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAverageBorrowRatePerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAverageSupplyRatePerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBorrowBalanceInOf(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentP2PBorrowIndex(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentP2PSupplyIndex(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentSupplyBalanceInOf(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentUserBorrowRatePerYear(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentUserSupplyRatePerYear(
      _poolToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnteredMarkets(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexes(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainMarketData(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketConfiguration(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketPauseStatus(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextUserBorrowRatePerYear(
      _poolToken: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextUserSupplyRatePerYear(
      _poolToken: string,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRatesPerYear(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalMarketBorrow(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalMarketSupply(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserBalanceStates(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserHealthFactor(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserHypotheticalBalanceStates(
      _user: string,
      _poolToken: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserHypotheticalHealthFactor(
      _user: string,
      _poolToken: string,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLiquidityDataForAsset(
      _user: string,
      _poolToken: string,
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserMaxCapacitiesForAsset(
      _user: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLiquidatable(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLiquidatable(address,address)"(
      _user: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketCreated(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketCreatedAndNotPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketCreatedAndNotPausedNorPartiallyPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    morpho(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
