/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MorphoChainlinkOracleV2FactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createMorphoChainlinkOracleV2"
      | "isMorphoChainlinkOracleV2"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CreateMorphoChainlinkOracleV2"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createMorphoChainlinkOracleV2",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isMorphoChainlinkOracleV2",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMorphoChainlinkOracleV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMorphoChainlinkOracleV2",
    data: BytesLike
  ): Result;
}

export namespace CreateMorphoChainlinkOracleV2Event {
  export type InputTuple = [caller: AddressLike, oracle: AddressLike];
  export type OutputTuple = [caller: string, oracle: string];
  export interface OutputObject {
    caller: string;
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MorphoChainlinkOracleV2Factory extends BaseContract {
  connect(runner?: ContractRunner | null): MorphoChainlinkOracleV2Factory;
  waitForDeployment(): Promise<this>;

  interface: MorphoChainlinkOracleV2FactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createMorphoChainlinkOracleV2: TypedContractMethod<
    [
      baseVault: AddressLike,
      baseVaultConversionSample: BigNumberish,
      baseFeed1: AddressLike,
      baseFeed2: AddressLike,
      baseTokenDecimals: BigNumberish,
      quoteVault: AddressLike,
      quoteVaultConversionSample: BigNumberish,
      quoteFeed1: AddressLike,
      quoteFeed2: AddressLike,
      quoteTokenDecimals: BigNumberish,
      salt: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  isMorphoChainlinkOracleV2: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createMorphoChainlinkOracleV2"
  ): TypedContractMethod<
    [
      baseVault: AddressLike,
      baseVaultConversionSample: BigNumberish,
      baseFeed1: AddressLike,
      baseFeed2: AddressLike,
      baseTokenDecimals: BigNumberish,
      quoteVault: AddressLike,
      quoteVaultConversionSample: BigNumberish,
      quoteFeed1: AddressLike,
      quoteFeed2: AddressLike,
      quoteTokenDecimals: BigNumberish,
      salt: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isMorphoChainlinkOracleV2"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "CreateMorphoChainlinkOracleV2"
  ): TypedContractEvent<
    CreateMorphoChainlinkOracleV2Event.InputTuple,
    CreateMorphoChainlinkOracleV2Event.OutputTuple,
    CreateMorphoChainlinkOracleV2Event.OutputObject
  >;

  filters: {
    "CreateMorphoChainlinkOracleV2(address,address)": TypedContractEvent<
      CreateMorphoChainlinkOracleV2Event.InputTuple,
      CreateMorphoChainlinkOracleV2Event.OutputTuple,
      CreateMorphoChainlinkOracleV2Event.OutputObject
    >;
    CreateMorphoChainlinkOracleV2: TypedContractEvent<
      CreateMorphoChainlinkOracleV2Event.InputTuple,
      CreateMorphoChainlinkOracleV2Event.OutputTuple,
      CreateMorphoChainlinkOracleV2Event.OutputObject
    >;
  };
}
