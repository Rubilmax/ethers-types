/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type MarketRewardsProgramStruct = {
  supplyRewardTokensPerYear: BigNumberish;
  borrowRewardTokensPerYear: BigNumberish;
  collateralRewardTokensPerYear: BigNumberish;
  start: BigNumberish;
  end: BigNumberish;
};

export type MarketRewardsProgramStructOutput = [
  supplyRewardTokensPerYear: bigint,
  borrowRewardTokensPerYear: bigint,
  collateralRewardTokensPerYear: bigint,
  start: bigint,
  end: bigint
] & {
  supplyRewardTokensPerYear: bigint;
  borrowRewardTokensPerYear: bigint;
  collateralRewardTokensPerYear: bigint;
  start: bigint;
  end: bigint;
};

export interface MarketRewardsProgramRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PROGRAMS_WITH_SAME_ID"
      | "getNumberOfProgramsForId"
      | "getPrograms"
      | "multicall"
      | "programs"
      | "register"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProgramRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PROGRAMS_WITH_SAME_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfProgramsForId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrograms",
    values: [AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "programs",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [AddressLike, AddressLike, BytesLike, MarketRewardsProgramStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PROGRAMS_WITH_SAME_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfProgramsForId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrograms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "programs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
}

export namespace ProgramRegisteredEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    market: BytesLike,
    sender: AddressLike,
    urd: AddressLike,
    program: MarketRewardsProgramStruct
  ];
  export type OutputTuple = [
    rewardToken: string,
    market: string,
    sender: string,
    urd: string,
    program: MarketRewardsProgramStructOutput
  ];
  export interface OutputObject {
    rewardToken: string;
    market: string;
    sender: string;
    urd: string;
    program: MarketRewardsProgramStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketRewardsProgramRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): MarketRewardsProgramRegistry;
  waitForDeployment(): Promise<this>;

  interface: MarketRewardsProgramRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PROGRAMS_WITH_SAME_ID: TypedContractMethod<[], [bigint], "view">;

  getNumberOfProgramsForId: TypedContractMethod<
    [id: BytesLike],
    [bigint],
    "view"
  >;

  getPrograms: TypedContractMethod<
    [
      caller: AddressLike,
      urd: AddressLike,
      rewardToken: AddressLike,
      market: BytesLike
    ],
    [MarketRewardsProgramStructOutput[]],
    "view"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  programs: TypedContractMethod<
    [id: BytesLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        supplyRewardTokensPerYear: bigint;
        borrowRewardTokensPerYear: bigint;
        collateralRewardTokensPerYear: bigint;
        start: bigint;
        end: bigint;
      }
    ],
    "view"
  >;

  register: TypedContractMethod<
    [
      urd: AddressLike,
      rewardToken: AddressLike,
      market: BytesLike,
      program: MarketRewardsProgramStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PROGRAMS_WITH_SAME_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfProgramsForId"
  ): TypedContractMethod<[id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrograms"
  ): TypedContractMethod<
    [
      caller: AddressLike,
      urd: AddressLike,
      rewardToken: AddressLike,
      market: BytesLike
    ],
    [MarketRewardsProgramStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "programs"
  ): TypedContractMethod<
    [id: BytesLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        supplyRewardTokensPerYear: bigint;
        borrowRewardTokensPerYear: bigint;
        collateralRewardTokensPerYear: bigint;
        start: bigint;
        end: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      urd: AddressLike,
      rewardToken: AddressLike,
      market: BytesLike,
      program: MarketRewardsProgramStruct
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProgramRegistered"
  ): TypedContractEvent<
    ProgramRegisteredEvent.InputTuple,
    ProgramRegisteredEvent.OutputTuple,
    ProgramRegisteredEvent.OutputObject
  >;

  filters: {
    "ProgramRegistered(address,bytes32,address,address,tuple)": TypedContractEvent<
      ProgramRegisteredEvent.InputTuple,
      ProgramRegisteredEvent.OutputTuple,
      ProgramRegisteredEvent.OutputObject
    >;
    ProgramRegistered: TypedContractEvent<
      ProgramRegisteredEvent.InputTuple,
      ProgramRegisteredEvent.OutputTuple,
      ProgramRegisteredEvent.OutputObject
    >;
  };
}
