/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ChainlinkOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_FEED_1"
      | "BASE_FEED_2"
      | "QUOTE_FEED_1"
      | "QUOTE_FEED_2"
      | "SCALE_FACTOR"
      | "VAULT"
      | "VAULT_CONVERSION_SAMPLE"
      | "price"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_FEED_1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_FEED_2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUOTE_FEED_1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "QUOTE_FEED_2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCALE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VAULT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VAULT_CONVERSION_SAMPLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASE_FEED_1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_FEED_2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUOTE_FEED_1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "QUOTE_FEED_2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SCALE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VAULT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_CONVERSION_SAMPLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
}

export interface ChainlinkOracle extends BaseContract {
  connect(runner?: ContractRunner | null): ChainlinkOracle;
  waitForDeployment(): Promise<this>;

  interface: ChainlinkOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_FEED_1: TypedContractMethod<[], [string], "view">;

  BASE_FEED_2: TypedContractMethod<[], [string], "view">;

  QUOTE_FEED_1: TypedContractMethod<[], [string], "view">;

  QUOTE_FEED_2: TypedContractMethod<[], [string], "view">;

  SCALE_FACTOR: TypedContractMethod<[], [bigint], "view">;

  VAULT: TypedContractMethod<[], [string], "view">;

  VAULT_CONVERSION_SAMPLE: TypedContractMethod<[], [bigint], "view">;

  price: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_FEED_1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASE_FEED_2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "QUOTE_FEED_1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "QUOTE_FEED_2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SCALE_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VAULT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VAULT_CONVERSION_SAMPLE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
